{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.snakeToCamelCase = exports.camelToSnakeCase = void 0;\n/**\n * Converts a given string from camelCase (used by protobuf.js and in JSON)\n * to snake_case (normally used in proto definitions).\n */\n\nfunction camelToSnakeCase(str) {\n  // Keep the first position capitalization, otherwise decapitalize with underscore.\n  return str.replace(/(?!^)[A-Z]/g, letter => `_${letter.toLowerCase()}`);\n}\n\nexports.camelToSnakeCase = camelToSnakeCase;\n/**\n * Capitalizes the first character of the given string.\n */\n\nfunction capitalize(str) {\n  if (str.length === 0) {\n    return str;\n  }\n\n  return str[0].toUpperCase() + str.slice(1);\n}\n/**\n * Converts a given string from snake_case (normally used in proto definitions) to\n * camelCase (used by protobuf.js)\n */\n\n\nfunction snakeToCamelCase(str) {\n  // split on spaces, underscore, or capital letters\n  const splitted = str.split(/(?=[A-Z])|(?:(?!(_(\\W+)))[\\s_])+/).filter(w => w && w.length > 0) // Keep the capitalization for the first split.\n  .map((word, index) => index === 0 ? word : word.toLowerCase());\n\n  if (splitted.length === 0) {\n    return str;\n  }\n\n  return [splitted[0], ...splitted.slice(1).map(capitalize)].join('');\n}\n\nexports.snakeToCamelCase = snakeToCamelCase;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;AAgBA;;;;;AAIA,SAAgBA,gBAAhB,CAAiCC,GAAjC,EAA4C;AAC1C;AACA,SAAOA,GAAG,CAACC,OAAJ,CAAY,aAAZ,EAA2BC,MAAM,IAAI,IAAIA,MAAM,CAACC,WAAP,EAAoB,EAA7D,CAAP;AACD;;AAHDC;AAKA;;;;AAGA,SAASC,UAAT,CAAoBL,GAApB,EAA+B;AAC7B,MAAIA,GAAG,CAACM,MAAJ,KAAe,CAAnB,EAAsB;AACpB,WAAON,GAAP;AACD;;AACD,SAAOA,GAAG,CAAC,CAAD,CAAH,CAAOO,WAAP,KAAuBP,GAAG,CAACQ,KAAJ,CAAU,CAAV,CAA9B;AACD;AAED;;;;;;AAIA,SAAgBC,gBAAhB,CAAiCT,GAAjC,EAA4C;AAC1C;AACA,QAAMU,QAAQ,GAAGV,GAAG,CACjBW,KADc,CACR,kCADQ,EAEdC,MAFc,CAEPC,CAAC,IAAIA,CAAC,IAAIA,CAAC,CAACP,MAAF,GAAW,CAFd,EAGf;AAHe,GAIdQ,GAJc,CAIV,CAACC,IAAD,EAAOC,KAAP,KAAkBA,KAAK,KAAK,CAAV,GAAcD,IAAd,GAAqBA,IAAI,CAACZ,WAAL,EAJ7B,CAAjB;;AAKA,MAAIO,QAAQ,CAACJ,MAAT,KAAoB,CAAxB,EAA2B;AACzB,WAAON,GAAP;AACD;;AACD,SAAO,CAACU,QAAQ,CAAC,CAAD,CAAT,EAAc,GAAGA,QAAQ,CAACF,KAAT,CAAe,CAAf,EAAkBM,GAAlB,CAAsBT,UAAtB,CAAjB,EAAoDY,IAApD,CAAyD,EAAzD,CAAP;AACD;;AAXDb","names":["camelToSnakeCase","str","replace","letter","toLowerCase","exports","capitalize","length","toUpperCase","slice","snakeToCamelCase","splitted","split","filter","w","map","word","index","join"],"sources":["../../src/util.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}