{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeResponse = exports.encodeRequest = void 0; // proto-over-HTTP request encoding and decoding\n\nconst fallback_1 = require(\"./fallback\");\n\nconst googleError_1 = require(\"./googleError\");\n\nfunction encodeRequest(rpc, protocol, servicePath, servicePort, request) {\n  const protoNamespaces = [];\n  let currNamespace = rpc.parent;\n\n  while (currNamespace.name !== '') {\n    protoNamespaces.unshift(currNamespace.name);\n    currNamespace = currNamespace.parent;\n  }\n\n  const protoServiceName = protoNamespaces.join('.');\n  const rpcName = rpc.name;\n  const headers = {\n    'Content-Type': 'application/x-protobuf'\n  };\n  const method = 'post';\n  const requestMessage = rpc.resolvedRequestType.fromObject(request);\n  const body = rpc.resolvedRequestType.encode(requestMessage).finish();\n  const url = `${protocol}://${servicePath}:${servicePort}/$rpc/${protoServiceName}/${rpcName}`;\n  return {\n    method,\n    url,\n    headers,\n    body\n  };\n}\n\nexports.encodeRequest = encodeRequest;\n\nfunction decodeResponse(rpc, ok, response) {\n  if (!ok) {\n    const statusDecoder = new googleError_1.GoogleErrorDecoder();\n    const error = statusDecoder.decodeErrorFromBuffer(response);\n    throw error;\n  }\n\n  const buffer = response instanceof ArrayBuffer ? new Uint8Array(response) : response;\n  const message = rpc.resolvedResponseType.decode(buffer);\n  return rpc.resolvedResponseType.toObject(message, fallback_1.defaultToObjectOptions);\n}\n\nexports.decodeResponse = decodeResponse;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;yDAgBA;;AAEA;;AAEA;;AAEA,SAAgBA,aAAhB,CACEC,GADF,EAEEC,QAFF,EAGEC,WAHF,EAIEC,WAJF,EAKEC,OALF,EAKa;AAEX,QAAMC,eAAe,GAAa,EAAlC;AACA,MAAIC,aAAa,GAAGN,GAAG,CAACO,MAAxB;;AACA,SAAOD,aAAa,CAACE,IAAd,KAAuB,EAA9B,EAAkC;AAChCH,mBAAe,CAACI,OAAhB,CAAwBH,aAAa,CAACE,IAAtC;AACAF,iBAAa,GAAGA,aAAa,CAACC,MAA9B;AACD;;AACD,QAAMG,gBAAgB,GAAGL,eAAe,CAACM,IAAhB,CAAqB,GAArB,CAAzB;AACA,QAAMC,OAAO,GAAGZ,GAAG,CAACQ,IAApB;AAEA,QAAMK,OAAO,GAA4B;AACvC,oBAAgB;AADuB,GAAzC;AAIA,QAAMC,MAAM,GAAG,MAAf;AACA,QAAMC,cAAc,GAAGf,GAAG,CAACgB,mBAAJ,CAAyBC,UAAzB,CAAoCb,OAApC,CAAvB;AACA,QAAMc,IAAI,GAAGlB,GAAG,CAACgB,mBAAJ,CAAyBG,MAAzB,CAAgCJ,cAAhC,EAAgDK,MAAhD,EAAb;AACA,QAAMC,GAAG,GAAG,GAAGpB,QAAQ,MAAMC,WAAW,IAAIC,WAAW,SAASO,gBAAgB,IAAIE,OAAO,EAA3F;AAEA,SAAO;AACLE,UADK;AAELO,OAFK;AAGLR,WAHK;AAILK;AAJK,GAAP;AAMD;;AA/BDI;;AAiCA,SAAgBC,cAAhB,CACEvB,GADF,EAEEwB,EAFF,EAGEC,QAHF,EAGgC;AAE9B,MAAI,CAACD,EAAL,EAAS;AACP,UAAME,aAAa,GAAG,IAAIC,gCAAJ,EAAtB;AACA,UAAMC,KAAK,GAAGF,aAAa,CAACG,qBAAd,CAAoCJ,QAApC,CAAd;AACA,UAAMG,KAAN;AACD;;AAED,QAAME,MAAM,GACVL,QAAQ,YAAYM,WAApB,GAAkC,IAAIC,UAAJ,CAAeP,QAAf,CAAlC,GAA6DA,QAD/D;AAEA,QAAMQ,OAAO,GAAGjC,GAAG,CAACkC,oBAAJ,CAA0BC,MAA1B,CAAiCL,MAAjC,CAAhB;AACA,SAAO9B,GAAG,CAACkC,oBAAJ,CAA0BE,QAA1B,CAAmCH,OAAnC,EAA4CI,iCAA5C,CAAP;AACD;;AAfDf","names":["encodeRequest","rpc","protocol","servicePath","servicePort","request","protoNamespaces","currNamespace","parent","name","unshift","protoServiceName","join","rpcName","headers","method","requestMessage","resolvedRequestType","fromObject","body","encode","finish","url","exports","decodeResponse","ok","response","statusDecoder","googleError_1","error","decodeErrorFromBuffer","buffer","ArrayBuffer","Uint8Array","message","resolvedResponseType","decode","toObject","fallback_1"],"sources":["../../src/fallbackProto.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}