{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeResponse = exports.encodeRequest = void 0; // proto-over-HTTP request encoding and decoding\n\nconst serializer = require(\"proto3-json-serializer\");\n\nconst fallback_1 = require(\"./fallback\");\n\nconst featureDetection_1 = require(\"./featureDetection\");\n\nconst googleError_1 = require(\"./googleError\");\n\nconst transcoding_1 = require(\"./transcoding\");\n\nif (!featureDetection_1.hasTextEncoder() || !featureDetection_1.hasTextDecoder()) {\n  if (featureDetection_1.isNodeJS()) {\n    // Node.js 10 does not have global TextDecoder\n    // TODO(@alexander-fenster): remove this logic after Node.js 10 is EOL.\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const util = require('util');\n\n    Object.assign(global, {\n      TextDecoder: util.TextDecoder,\n      TextEncoder: util.TextEncoder\n    });\n  } else {\n    require('fast-text-encoding');\n  }\n}\n\nfunction encodeRequest(rpc, protocol, servicePath, servicePort, request) {\n  const headers = {\n    'Content-Type': 'application/json'\n  };\n  const message = rpc.resolvedRequestType.fromObject(request);\n  const json = serializer.toProto3JSON(message);\n\n  if (!json) {\n    throw new Error(`Cannot send null request to RPC ${rpc.name}.`);\n  }\n\n  if (typeof json !== 'object' || Array.isArray(json)) {\n    throw new Error(`Request to RPC ${rpc.name} must be an object.`);\n  }\n\n  const transcoded = transcoding_1.transcode(json, rpc.parsedOptions, rpc.resolvedRequestType.fields);\n\n  if (!transcoded) {\n    throw new Error(`Cannot build HTTP request for ${JSON.stringify(json)}, method: ${rpc.name}`);\n  }\n\n  const method = transcoded.httpMethod;\n  const body = JSON.stringify(transcoded.data);\n  const url = `${protocol}://${servicePath}:${servicePort}/${transcoded.url.replace(/^\\//, '')}?${transcoded.queryString}`;\n  return {\n    method,\n    url,\n    headers,\n    body\n  };\n}\n\nexports.encodeRequest = encodeRequest;\n\nfunction decodeResponse(rpc, ok, response) {\n  // eslint-disable-next-line node/no-unsupported-features/node-builtins\n  const decodedString = new TextDecoder().decode(response);\n  const json = JSON.parse(decodedString);\n\n  if (!ok) {\n    const error = googleError_1.GoogleError.parseHttpError(json);\n    throw error;\n  }\n\n  const message = serializer.fromProto3JSON(rpc.resolvedResponseType, json);\n\n  if (!message) {\n    throw new Error(`Received null response from RPC ${rpc.name}`);\n  }\n\n  return rpc.resolvedResponseType.toObject(message, fallback_1.defaultToObjectOptions);\n}\n\nexports.decodeResponse = decodeResponse;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;yDAgBA;;AAEA;;AACA;;AAEA;;AACA;;AACA;;AAEA,IAAI,CAACA,mCAAD,IAAqB,CAACA,mCAA1B,EAA4C;AAC1C,MAAIA,6BAAJ,EAAgB;AACd;AACA;AACA;AACA,UAAMC,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACAC,UAAM,CAACC,MAAP,CAAcC,MAAd,EAAsB;AACpBC,iBAAW,EAAEL,IAAI,CAACK,WADE;AAEpBC,iBAAW,EAAEN,IAAI,CAACM;AAFE,KAAtB;AAID,GATD,MASO;AACLL,WAAO,CAAC,oBAAD,CAAP;AACD;AACF;;AAED,SAAgBM,aAAhB,CACEC,GADF,EAEEC,QAFF,EAGEC,WAHF,EAIEC,WAJF,EAKEC,OALF,EAKa;AAEX,QAAMC,OAAO,GAA4B;AACvC,oBAAgB;AADuB,GAAzC;AAGA,QAAMC,OAAO,GAAGN,GAAG,CAACO,mBAAJ,CAAyBC,UAAzB,CAAoCJ,OAApC,CAAhB;AACA,QAAMK,IAAI,GAAGC,UAAU,CAACC,YAAX,CAAwBL,OAAxB,CAAb;;AACA,MAAI,CAACG,IAAL,EAAW;AACT,UAAM,IAAIG,KAAJ,CAAU,mCAAmCZ,GAAG,CAACa,IAAI,GAArD,CAAN;AACD;;AACD,MAAI,OAAOJ,IAAP,KAAgB,QAAhB,IAA4BK,KAAK,CAACC,OAAN,CAAcN,IAAd,CAAhC,EAAqD;AACnD,UAAM,IAAIG,KAAJ,CAAU,kBAAkBZ,GAAG,CAACa,IAAI,qBAApC,CAAN;AACD;;AACD,QAAMG,UAAU,GAAGC,wBACjBR,IADiB,EAEjBT,GAAG,CAACkB,aAFa,EAGjBlB,GAAG,CAACO,mBAAJ,CAAyBY,MAHR,CAAnB;;AAKA,MAAI,CAACH,UAAL,EAAiB;AACf,UAAM,IAAIJ,KAAJ,CACJ,iCAAiCQ,IAAI,CAACC,SAAL,CAAeZ,IAAf,CAAoB,aACnDT,GAAG,CAACa,IACN,EAHI,CAAN;AAKD;;AACD,QAAMS,MAAM,GAAGN,UAAU,CAACO,UAA1B;AACA,QAAMC,IAAI,GAAGJ,IAAI,CAACC,SAAL,CAAeL,UAAU,CAACS,IAA1B,CAAb;AACA,QAAMC,GAAG,GAAG,GAAGzB,QAAQ,MAAMC,WAAW,IAAIC,WAAW,IAAIa,UAAU,CAACU,GAAX,CAAeC,OAAf,CACzD,KADyD,EAEzD,EAFyD,CAG1D,IAAIX,UAAU,CAACY,WAAW,EAH3B;AAKA,SAAO;AACLN,UADK;AAELI,OAFK;AAGLrB,WAHK;AAILmB;AAJK,GAAP;AAMD;;AA3CDK;;AA6CA,SAAgBC,cAAhB,CACE9B,GADF,EAEE+B,EAFF,EAGEC,QAHF,EAGgC;AAE9B;AACA,QAAMC,aAAa,GAAG,IAAIpC,WAAJ,GAAkBqC,MAAlB,CAAyBF,QAAzB,CAAtB;AACA,QAAMvB,IAAI,GAAGW,IAAI,CAACe,KAAL,CAAWF,aAAX,CAAb;;AACA,MAAI,CAACF,EAAL,EAAS;AACP,UAAMK,KAAK,GAAGC,0BAAYC,cAAZ,CAA2B7B,IAA3B,CAAd;AACA,UAAM2B,KAAN;AACD;;AACD,QAAM9B,OAAO,GAAGI,UAAU,CAAC6B,cAAX,CAA0BvC,GAAG,CAACwC,oBAA9B,EAAqD/B,IAArD,CAAhB;;AACA,MAAI,CAACH,OAAL,EAAc;AACZ,UAAM,IAAIM,KAAJ,CAAU,mCAAmCZ,GAAG,CAACa,IAAI,EAArD,CAAN;AACD;;AACD,SAAOb,GAAG,CAACwC,oBAAJ,CAA0BC,QAA1B,CAAmCnC,OAAnC,EAA4CoC,iCAA5C,CAAP;AACD;;AAjBDb","names":["featureDetection_1","util","require","Object","assign","global","TextDecoder","TextEncoder","encodeRequest","rpc","protocol","servicePath","servicePort","request","headers","message","resolvedRequestType","fromObject","json","serializer","toProto3JSON","Error","name","Array","isArray","transcoded","transcoding_1","parsedOptions","fields","JSON","stringify","method","httpMethod","body","data","url","replace","queryString","exports","decodeResponse","ok","response","decodedString","decode","parse","error","googleError_1","parseHttpError","fromProto3JSON","resolvedResponseType","toObject","fallback_1"],"sources":["../../src/fallbackRest.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}