{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PagedApiCaller = void 0;\n\nconst call_1 = require(\"../call\");\n\nconst googleError_1 = require(\"../googleError\");\n\nconst resourceCollector_1 = require(\"./resourceCollector\");\n\nclass PagedApiCaller {\n  /**\n   * Creates an API caller that returns a stream to performs page-streaming.\n   *\n   * @private\n   * @constructor\n   * @param {PageDescriptor} pageDescriptor - indicates the structure\n   *   of page streaming to be performed.\n   */\n  constructor(pageDescriptor) {\n    this.pageDescriptor = pageDescriptor;\n  }\n  /**\n   * This function translates between regular gRPC calls (that accepts a request and returns a response,\n   * and does not know anything about pages and page tokens) and the users' callback (that expects\n   * to see resources from one page, a request to get the next page, and the raw response from the server).\n   *\n   * It generates a function that can be passed as a callback function to a gRPC call, will understand\n   * pagination-specific fields in the response, and call the users' callback after having those fields\n   * parsed.\n   *\n   * @param request Request object. It needs to be passed to all subsequent next page requests\n   * (the main content of the request object stays unchanged, only the next page token changes)\n   * @param callback The user's callback that expects the page content, next page request, and raw response.\n   */\n\n\n  generateParseResponseCallback(request, callback) {\n    const resourceFieldName = this.pageDescriptor.resourceField;\n    const responsePageTokenFieldName = this.pageDescriptor.responsePageTokenField;\n    const requestPageTokenFieldName = this.pageDescriptor.requestPageTokenField;\n    return (err, response) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      if (!request) {\n        callback(new googleError_1.GoogleError('Undefined request in pagination method callback.'));\n        return;\n      }\n\n      if (!response) {\n        callback(new googleError_1.GoogleError('Undefined response in pagination method callback.'));\n        return;\n      }\n\n      const resources = response[resourceFieldName] || [];\n      const pageToken = response[responsePageTokenFieldName];\n      let nextPageRequest = null;\n\n      if (pageToken) {\n        nextPageRequest = Object.assign({}, request);\n        nextPageRequest[requestPageTokenFieldName] = pageToken;\n      }\n\n      callback(err, resources, nextPageRequest, response);\n    };\n  }\n  /**\n   * Adds a special ability to understand pagination-specific fields to the existing gRPC call.\n   * The original gRPC call just calls callback(err, result).\n   * The wrapped one will call callback(err, resources, nextPageRequest, rawResponse) instead.\n   *\n   * @param func gRPC call (normally, a service stub call). The gRPC call is expected to accept four parameters:\n   * request, metadata, call options, and callback.\n   */\n\n\n  wrap(func) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self = this;\n    return function wrappedCall(argument, metadata, options, callback) {\n      return func(argument, metadata, options, self.generateParseResponseCallback(argument, callback));\n    };\n  }\n  /**\n   * Makes it possible to use both callback-based and promise-based calls.\n   * Returns an OngoingCall or OngoingCallPromise object.\n   * Regardless of which one is returned, it always has a `.callback` to call.\n   *\n   * @param settings Call settings. Can only be used to replace Promise with another promise implementation.\n   * @param [callback] Callback to be called, if any.\n   */\n\n\n  init(callback) {\n    if (callback) {\n      return new call_1.OngoingCall(callback);\n    }\n\n    return new call_1.OngoingCallPromise();\n  }\n  /**\n   * Implements auto-pagination logic.\n   *\n   * @param apiCall A function that performs gRPC request and calls its callback with a response or an error.\n   * It's supposed to be a gRPC service stub function wrapped into several layers of wrappers that make it\n   * accept just two parameters: (request, callback).\n   * @param request A request object that came from the user.\n   * @param settings Call settings. We are interested in `maxResults`, autoPaginate`, `pageToken`, and `pageSize`\n   * (they are all optional).\n   * @param ongoingCall An instance of OngoingCall or OngoingCallPromise that can be used for call cancellation,\n   * and is used to return results to the user.\n   */\n\n\n  call(apiCall, request, settings, ongoingCall) {\n    request = Object.assign({}, request); // If settings object contain pageToken or pageSize, override the corresponding fields in the request object.\n\n    if (settings.pageToken) {\n      request[this.pageDescriptor.requestPageTokenField] = settings.pageToken;\n    }\n\n    if (settings.pageSize) {\n      request[this.pageDescriptor.requestPageSizeField] = settings.pageSize;\n    }\n\n    if (!settings.autoPaginate) {\n      // they don't want auto-pagination this time - okay, just call once\n      ongoingCall.call(apiCall, request);\n      return;\n    }\n\n    const maxResults = settings.maxResults || -1;\n    const resourceCollector = new resourceCollector_1.ResourceCollector(apiCall, maxResults);\n    resourceCollector.processAllPages(request).then(resources => ongoingCall.callback(null, resources), err => ongoingCall.callback(err));\n  }\n\n  fail(ongoingCall, err) {\n    ongoingCall.callback(err);\n  }\n\n  result(ongoingCall) {\n    return ongoingCall.promise;\n  }\n\n}\n\nexports.PagedApiCaller = PagedApiCaller;","map":{"version":3,"mappings":"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","names":["PagedApiCaller","constructor","pageDescriptor","generateParseResponseCallback","request","callback","resourceFieldName","resourceField","responsePageTokenFieldName","responsePageTokenField","requestPageTokenFieldName","requestPageTokenField","err","response","googleError_1","resources","pageToken","nextPageRequest","Object","assign","wrap","func","self","wrappedCall","argument","metadata","options","init","call_1","call","apiCall","settings","ongoingCall","pageSize","requestPageSizeField","autoPaginate","maxResults","resourceCollector","resourceCollector_1","processAllPages","then","fail","result","promise","exports"],"sources":["../../../src/paginationCalls/pagedApiCaller.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}