{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GoogleProtoFilesRoot = exports.GrpcClient = exports.ClientStub = void 0;\n\nconst grpcProtoLoader = require(\"@grpc/proto-loader\");\n\nconst child_process_1 = require(\"child_process\");\n\nconst fs = require(\"fs\");\n\nconst google_auth_library_1 = require(\"google-auth-library\");\n\nconst grpc = require(\"@grpc/grpc-js\");\n\nconst os = require(\"os\");\n\nconst path_1 = require(\"path\");\n\nconst path = require(\"path\");\n\nconst protobuf = require(\"protobufjs\");\n\nconst objectHash = require(\"object-hash\");\n\nconst gax = require(\"./gax\");\n\nconst googleProtoFilesDir = path.join(__dirname, '..', '..', 'protos'); // INCLUDE_DIRS is passed to @grpc/proto-loader\n\nconst INCLUDE_DIRS = [];\nINCLUDE_DIRS.push(googleProtoFilesDir); // COMMON_PROTO_FILES logic is here for protobufjs loads (see\n// GoogleProtoFilesRoot below)\n\nconst commonProtoFiles = require(\"./protosList.json\"); // use the correct path separator for the OS we are running on\n\n\nconst COMMON_PROTO_FILES = commonProtoFiles.map(file => file.replace(/[/\\\\]/g, path.sep));\n/*\n * Async version of readFile.\n *\n * @returns {Promise} Contents of file at path.\n */\n\nasync function readFileAsync(path) {\n  return new Promise((resolve, reject) => {\n    fs.readFile(path, 'utf8', (err, content) => {\n      if (err) return reject(err);else resolve(content);\n    });\n  });\n}\n/*\n * Async version of execFile.\n *\n * @returns {Promise} stdout from command execution.\n */\n\n\nasync function execFileAsync(command, args) {\n  return new Promise((resolve, reject) => {\n    child_process_1.execFile(command, args, (err, stdout) => {\n      if (err) return reject(err);else resolve(stdout);\n    });\n  });\n}\n\nclass ClientStub extends grpc.Client {}\n\nexports.ClientStub = ClientStub;\n\nclass GrpcClient {\n  /**\n   * A class which keeps the context of gRPC and auth for the gRPC.\n   *\n   * @param {Object=} options - The optional parameters. It will be directly\n   *   passed to google-auth-library library, so parameters like keyFile or\n   *   credentials will be valid.\n   * @param {Object=} options.auth - An instance of google-auth-library.\n   *   When specified, this auth instance will be used instead of creating\n   *   a new one.\n   * @param {Object=} options.grpc - When specified, this will be used\n   *   for the 'grpc' module in this context. By default, it will load the grpc\n   *   module in the standard way.\n   * @constructor\n   */\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var _a;\n\n    this.auth = options.auth || new google_auth_library_1.GoogleAuth(options);\n    this.fallback = false;\n    const minimumVersion = 10;\n    const major = Number((_a = process.version.match(/^v(\\d+)/)) === null || _a === void 0 ? void 0 : _a[1]);\n\n    if (Number.isNaN(major) || major < minimumVersion) {\n      const errorMessage = `Node.js v${minimumVersion}.0.0 is a minimum requirement. To learn about legacy version support visit: ` + 'https://github.com/googleapis/google-cloud-node#supported-nodejs-versions';\n      throw new Error(errorMessage);\n    }\n\n    if ('grpc' in options) {\n      this.grpc = options.grpc;\n      this.grpcVersion = '';\n    } else {\n      this.grpc = grpc;\n      this.grpcVersion = require('@grpc/grpc-js/package.json').version;\n    }\n  }\n  /**\n   * Key for proto cache map. We are doing our best to make sure we respect\n   * the options, so if the same proto file is loaded with different set of\n   * options, the cache won't be used.  Since some of the options are\n   * Functions (e.g. `enums: String` - see below in `loadProto()`),\n   * they will be omitted from the cache key.  If the cache breaks anything\n   * for you, use the `ignoreCache` parameter of `loadProto()` to disable it.\n   */\n\n\n  static protoCacheKey(filename, options) {\n    if (!filename || Array.isArray(filename) && (filename.length === 0 || !filename[0])) {\n      return undefined;\n    }\n\n    return JSON.stringify(filename) + ' ' + JSON.stringify(options);\n  }\n  /**\n   * In rare cases users might need to deallocate all memory consumed by loaded protos.\n   * This method will delete the proto cache content.\n   */\n\n\n  static clearProtoCache() {\n    GrpcClient.protoCache.clear();\n  }\n  /**\n   * Creates a gRPC credentials. It asks the auth data if necessary.\n   * @private\n   * @param {Object} opts - options values for configuring credentials.\n   * @param {Object=} opts.sslCreds - when specified, this is used instead\n   *   of default channel credentials.\n   * @return {Promise} The promise which will be resolved to the gRPC credential.\n   */\n\n\n  async _getCredentials(opts) {\n    if (opts.sslCreds) {\n      return opts.sslCreds;\n    }\n\n    const grpc = this.grpc;\n    const sslCreds = opts.cert && opts.key ? grpc.credentials.createSsl(null, Buffer.from(opts.key), Buffer.from(opts.cert)) : grpc.credentials.createSsl();\n    const client = await this.auth.getClient();\n    const credentials = grpc.credentials.combineChannelCredentials(sslCreds, grpc.credentials.createFromGoogleCredential(client));\n    return credentials;\n  }\n\n  static defaultOptions() {\n    // This set of @grpc/proto-loader options\n    // 'closely approximates the existing behavior of grpc.load'\n    const includeDirs = INCLUDE_DIRS.slice();\n    const options = {\n      keepCase: false,\n      longs: String,\n      enums: String,\n      defaults: true,\n      oneofs: true,\n      includeDirs\n    };\n    return options;\n  }\n  /**\n   * Loads the gRPC service from the proto file(s) at the given path and with the\n   * given options. Caches the loaded protos so the subsequent loads don't do\n   * any disk reads.\n   * @param filename The path to the proto file(s).\n   * @param options Options for loading the proto file.\n   * @param ignoreCache Defaults to `false`. Set it to `true` if the caching logic\n   *   incorrectly decides that the options object is the same, or if you want to\n   *   re-read the protos from disk for any other reason.\n   */\n\n\n  loadFromProto(filename, options) {\n    let ignoreCache = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    const cacheKey = GrpcClient.protoCacheKey(filename, options);\n    let grpcPackage = cacheKey ? GrpcClient.protoCache.get(cacheKey) : undefined;\n\n    if (ignoreCache || !grpcPackage) {\n      const packageDef = grpcProtoLoader.loadSync(filename, options);\n      grpcPackage = this.grpc.loadPackageDefinition(packageDef);\n\n      if (cacheKey) {\n        GrpcClient.protoCache.set(cacheKey, grpcPackage);\n      }\n    }\n\n    return grpcPackage;\n  }\n  /**\n   * Load gRPC proto service from a filename looking in googleapis common protos\n   * when necessary. Caches the loaded protos so the subsequent loads don't do\n   * any disk reads.\n   * @param {String} protoPath - The directory to search for the protofile.\n   * @param {String|String[]} filename - The filename(s) of the proto(s) to be loaded.\n   *   If omitted, protoPath will be treated as a file path to load.\n   * @param ignoreCache Defaults to `false`. Set it to `true` if the caching logic\n   *   incorrectly decides that the options object is the same, or if you want to\n   *   re-read the protos from disk for any other reason.\n   * @return {Object<string, *>} The gRPC loaded result (the toplevel namespace\n   *   object).\n   */\n\n\n  loadProto(protoPath, filename) {\n    let ignoreCache = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (!filename) {\n      filename = path.basename(protoPath);\n      protoPath = path.dirname(protoPath);\n    }\n\n    if (Array.isArray(filename) && filename.length === 0) {\n      return {};\n    }\n\n    const options = GrpcClient.defaultOptions();\n    options.includeDirs.unshift(protoPath);\n    return this.loadFromProto(filename, options, ignoreCache);\n  }\n\n  static _resolveFile(protoPath, filename) {\n    if (fs.existsSync(path.join(protoPath, filename))) {\n      return path.join(protoPath, filename);\n    } else if (COMMON_PROTO_FILES.indexOf(filename) > -1) {\n      return path.join(googleProtoFilesDir, filename);\n    }\n\n    throw new Error(filename + ' could not be found in ' + protoPath);\n  }\n\n  loadProtoJSON(json) {\n    let ignoreCache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const hash = objectHash(json).toString();\n    const cached = GrpcClient.protoCache.get(hash);\n\n    if (cached && !ignoreCache) {\n      return cached;\n    }\n\n    const options = GrpcClient.defaultOptions();\n    const packageDefinition = grpcProtoLoader.fromJSON(json, options);\n    const grpcPackage = this.grpc.loadPackageDefinition(packageDefinition);\n    GrpcClient.protoCache.set(hash, grpcPackage);\n    return grpcPackage;\n  }\n\n  metadataBuilder(headers) {\n    const Metadata = this.grpc.Metadata;\n    const baseMetadata = new Metadata();\n\n    for (const key in headers) {\n      const value = headers[key];\n\n      if (Array.isArray(value)) {\n        value.forEach(v => baseMetadata.add(key, v));\n      } else {\n        baseMetadata.set(key, `${value}`);\n      }\n    }\n\n    return function buildMetadata(abTests, moreHeaders) {\n      // TODO: bring the A/B testing info into the metadata.\n      let copied = false;\n      let metadata = baseMetadata;\n\n      if (moreHeaders) {\n        for (const key in moreHeaders) {\n          if (key.toLowerCase() !== 'x-goog-api-client') {\n            if (!copied) {\n              copied = true;\n              metadata = metadata.clone();\n            }\n\n            const value = moreHeaders[key];\n\n            if (Array.isArray(value)) {\n              value.forEach(v => metadata.add(key, v));\n            } else {\n              metadata.set(key, `${value}`);\n            }\n          }\n        }\n      }\n\n      return metadata;\n    };\n  }\n  /**\n   * A wrapper of {@link constructSettings} function under the gRPC context.\n   *\n   * Most of parameters are common among constructSettings, please take a look.\n   * @param {string} serviceName - The fullly-qualified name of the service.\n   * @param {Object} clientConfig - A dictionary of the client config.\n   * @param {Object} configOverrides - A dictionary of overriding configs.\n   * @param {Object} headers - A dictionary of additional HTTP header name to\n   *   its value.\n   * @return {Object} A mapping of method names to CallSettings.\n   */\n\n\n  constructSettings(serviceName, clientConfig, configOverrides, headers) {\n    return gax.constructSettings(serviceName, clientConfig, configOverrides, this.grpc.status, {\n      metadataBuilder: this.metadataBuilder(headers)\n    });\n  }\n  /**\n   * Creates a gRPC stub with current gRPC and auth.\n   * @param {function} CreateStub - The constructor function of the stub.\n   * @param {Object} options - The optional arguments to customize\n   *   gRPC connection. This options will be passed to the constructor of\n   *   gRPC client too.\n   * @param {string} options.servicePath - The name of the server of the service.\n   * @param {number} options.port - The port of the service.\n   * @param {grpcTypes.ClientCredentials=} options.sslCreds - The credentials to be used\n   *   to set up gRPC connection.\n   * @param {string} defaultServicePath - The default service path.\n   * @return {Promise} A promise which resolves to a gRPC stub instance.\n   */\n\n\n  async createStub(CreateStub, options, customServicePath) {\n    // The following options are understood by grpc-gcp and need a special treatment\n    // (should be passed without a `grpc.` prefix)\n    const grpcGcpOptions = ['grpc.callInvocationTransformer', 'grpc.channelFactoryOverride', 'grpc.gcpApiConfig'];\n    const [cert, key] = await this._detectClientCertificate(options);\n\n    const servicePath = this._mtlsServicePath(options.servicePath, customServicePath, cert && key);\n\n    const opts = Object.assign({}, options, {\n      cert,\n      key,\n      servicePath\n    });\n    const serviceAddress = servicePath + ':' + opts.port;\n    const creds = await this._getCredentials(opts);\n    const grpcOptions = {}; // @grpc/grpc-js limits max receive/send message length starting from v0.8.0\n    // https://github.com/grpc/grpc-node/releases/tag/%40grpc%2Fgrpc-js%400.8.0\n    // To keep the existing behavior and avoid libraries breakage, we pass -1 there as suggested.\n\n    grpcOptions['grpc.max_receive_message_length'] = -1;\n    grpcOptions['grpc.max_send_message_length'] = -1;\n    grpcOptions['grpc.initial_reconnect_backoff_ms'] = 1000;\n    Object.keys(opts).forEach(key => {\n      const value = options[key]; // the older versions had a bug which required users to call an option\n      // grpc.grpc.* to make it actually pass to gRPC as grpc.*, let's handle\n      // this here until the next major release\n\n      if (key.startsWith('grpc.grpc.')) {\n        key = key.replace(/^grpc\\./, '');\n      }\n\n      if (key.startsWith('grpc.')) {\n        if (grpcGcpOptions.includes(key)) {\n          key = key.replace(/^grpc\\./, '');\n        }\n\n        grpcOptions[key] = value;\n      }\n\n      if (key.startsWith('grpc-node.')) {\n        grpcOptions[key] = value;\n      }\n    });\n    const stub = new CreateStub(serviceAddress, creds, grpcOptions);\n    return stub;\n  }\n  /**\n   * Detect mTLS client certificate based on logic described in\n   * https://google.aip.dev/auth/4114.\n   *\n   * @param {object} [options] - The configuration object.\n   * @returns {Promise} Resolves array of strings representing cert and key.\n   */\n\n\n  async _detectClientCertificate(opts) {\n    var _a;\n\n    const certRegex = /(?<cert>-----BEGIN CERTIFICATE-----.*?-----END CERTIFICATE-----)/s;\n    const keyRegex = /(?<key>-----BEGIN PRIVATE KEY-----.*?-----END PRIVATE KEY-----)/s; // If GOOGLE_API_USE_CLIENT_CERTIFICATE is true...:\n\n    if (typeof process !== 'undefined' && ((_a = process === null || process === void 0 ? void 0 : process.env) === null || _a === void 0 ? void 0 : _a.GOOGLE_API_USE_CLIENT_CERTIFICATE) === 'true') {\n      if ((opts === null || opts === void 0 ? void 0 : opts.cert) && (opts === null || opts === void 0 ? void 0 : opts.key)) {\n        return [opts.cert, opts.key];\n      } // If context aware metadata exists, run the cert provider command,\n      // parse the output to extract cert and key, and use this cert/key.\n\n\n      const metadataPath = path_1.join(os.homedir(), '.secureConnect', 'context_aware_metadata.json');\n      const metadata = JSON.parse(await readFileAsync(metadataPath));\n\n      if (!metadata.cert_provider_command) {\n        throw Error('no cert_provider_command found');\n      }\n\n      const stdout = await execFileAsync(metadata.cert_provider_command[0], metadata.cert_provider_command.slice(1));\n      const matchCert = stdout.toString().match(certRegex);\n      const matchKey = stdout.toString().match(keyRegex);\n\n      if (!((matchCert === null || matchCert === void 0 ? void 0 : matchCert.groups) && (matchKey === null || matchKey === void 0 ? void 0 : matchKey.groups))) {\n        throw Error('unable to parse certificate and key');\n      } else {\n        return [matchCert.groups.cert, matchKey.groups.key];\n      }\n    } // If GOOGLE_API_USE_CLIENT_CERTIFICATE is not set or false,\n    // use no cert or key:\n\n\n    return [undefined, undefined];\n  }\n  /**\n   * Return service path, taking into account mTLS logic.\n   * See: https://google.aip.dev/auth/4114\n   *\n   * @param {string|undefined} servicePath - The path of the service.\n   * @param {string|undefined} customServicePath - Did the user provide a custom service URL.\n   * @param {boolean} hasCertificate - Was a certificate found.\n   * @returns {string} The DNS address for this service.\n   */\n\n\n  _mtlsServicePath(servicePath, customServicePath, hasCertificate) {\n    var _a, _b; // If user provides a custom service path, return the current service\n    // path and do not attempt to add mtls subdomain:\n\n\n    if (customServicePath || !servicePath) return servicePath;\n\n    if (typeof process !== 'undefined' && ((_a = process === null || process === void 0 ? void 0 : process.env) === null || _a === void 0 ? void 0 : _a.GOOGLE_API_USE_MTLS_ENDPOINT) === 'never') {\n      // It was explicitly asked that mtls endpoint not be used:\n      return servicePath;\n    } else if (typeof process !== 'undefined' && ((_b = process === null || process === void 0 ? void 0 : process.env) === null || _b === void 0 ? void 0 : _b.GOOGLE_API_USE_MTLS_ENDPOINT) === 'always' || hasCertificate) {\n      // Either auto-detect or explicit setting of endpoint:\n      return servicePath.replace('googleapis.com', 'mtls.googleapis.com');\n    }\n\n    return servicePath;\n  }\n  /**\n   * Creates a 'bytelength' function for a given proto message class.\n   *\n   * See {@link BundleDescriptor} about the meaning of the return value.\n   *\n   * @param {function} message - a constructor function that is generated by\n   *   protobuf.js. Assumes 'encoder' field in the message.\n   * @return {function(Object):number} - a function to compute the byte length\n   *   for an object.\n   */\n\n\n  static createByteLengthFunction(message) {\n    return function getByteLength(obj) {\n      return message.encode(obj).finish().length;\n    };\n  }\n\n}\n\nexports.GrpcClient = GrpcClient;\nGrpcClient.protoCache = new Map();\n\nclass GoogleProtoFilesRoot extends protobuf.Root {\n  constructor() {\n    super(...arguments);\n  } // Causes the loading of an included proto to check if it is a common\n  // proto. If it is a common proto, use the bundled proto.\n\n\n  resolvePath(originPath, includePath) {\n    originPath = path.normalize(originPath);\n    includePath = path.normalize(includePath); // Fully qualified paths don't need to be resolved.\n\n    if (path.isAbsolute(includePath)) {\n      if (!fs.existsSync(includePath)) {\n        throw new Error('The include `' + includePath + '` was not found.');\n      }\n\n      return includePath;\n    }\n\n    if (COMMON_PROTO_FILES.indexOf(includePath) > -1) {\n      return path.join(googleProtoFilesDir, includePath);\n    }\n\n    return GoogleProtoFilesRoot._findIncludePath(originPath, includePath);\n  }\n\n  static _findIncludePath(originPath, includePath) {\n    originPath = path.normalize(originPath);\n    includePath = path.normalize(includePath);\n    let current = originPath;\n    let found = fs.existsSync(path.join(current, includePath));\n\n    while (!found && current.length > 0) {\n      current = current.substring(0, current.lastIndexOf(path.sep));\n      found = fs.existsSync(path.join(current, includePath));\n    }\n\n    if (!found) {\n      throw new Error('The include `' + includePath + '` was not found.');\n    }\n\n    return path.join(current, includePath);\n  }\n\n}\n\nexports.GoogleProtoFilesRoot = GoogleProtoFilesRoot;","map":{"version":3,"mappings":"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","names":["googleProtoFilesDir","path","join","__dirname","INCLUDE_DIRS","push","COMMON_PROTO_FILES","commonProtoFiles","map","file","replace","sep","readFileAsync","Promise","resolve","reject","fs","readFile","err","content","execFileAsync","command","args","child_process_1","stdout","ClientStub","grpc","Client","exports","GrpcClient","constructor","options","auth","google_auth_library_1","fallback","minimumVersion","major","Number","process","version","match","_a","isNaN","errorMessage","Error","grpcVersion","require","protoCacheKey","filename","Array","isArray","length","undefined","JSON","stringify","clearProtoCache","protoCache","clear","_getCredentials","opts","sslCreds","cert","key","credentials","createSsl","Buffer","from","client","getClient","combineChannelCredentials","createFromGoogleCredential","defaultOptions","includeDirs","slice","keepCase","longs","String","enums","defaults","oneofs","loadFromProto","ignoreCache","cacheKey","grpcPackage","get","packageDef","grpcProtoLoader","loadSync","loadPackageDefinition","set","loadProto","protoPath","basename","dirname","unshift","_resolveFile","existsSync","indexOf","loadProtoJSON","json","hash","objectHash","toString","cached","packageDefinition","fromJSON","metadataBuilder","headers","Metadata","baseMetadata","value","forEach","v","add","buildMetadata","abTests","moreHeaders","copied","metadata","toLowerCase","clone","constructSettings","serviceName","clientConfig","configOverrides","gax","status","createStub","CreateStub","customServicePath","grpcGcpOptions","_detectClientCertificate","servicePath","_mtlsServicePath","Object","assign","serviceAddress","port","creds","grpcOptions","keys","startsWith","includes","stub","certRegex","keyRegex","env","GOOGLE_API_USE_CLIENT_CERTIFICATE","metadataPath","path_1","os","homedir","parse","cert_provider_command","matchCert","matchKey","groups","hasCertificate","GOOGLE_API_USE_MTLS_ENDPOINT","_b","createByteLengthFunction","message","getByteLength","obj","encode","finish","Map","GoogleProtoFilesRoot","protobuf","Root","resolvePath","originPath","includePath","normalize","isAbsolute","_findIncludePath","current","found","substring","lastIndexOf"],"sources":["../../src/grpc.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}