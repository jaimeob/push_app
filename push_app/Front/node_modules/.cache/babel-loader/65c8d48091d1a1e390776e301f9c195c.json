{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fallback = exports.protobuf = exports.createApiCall = exports.lro = exports.GrpcClient = exports.defaultToObjectOptions = exports.version = exports.routingHeader = void 0;\n\nconst protobuf = require(\"protobufjs\");\n\nexports.protobuf = protobuf;\n\nconst gax = require(\"./gax\");\n\nconst routingHeader = require(\"./routingHeader\");\n\nexports.routingHeader = routingHeader;\n\nconst status_1 = require(\"./status\");\n\nconst google_auth_library_1 = require(\"google-auth-library\");\n\nconst objectHash = require(\"object-hash\");\n\nconst operationsClient_1 = require(\"./operationsClient\");\n\nconst createApiCall_1 = require(\"./createApiCall\");\n\nconst fallbackProto = require(\"./fallbackProto\");\n\nconst fallbackRest = require(\"./fallbackRest\");\n\nconst featureDetection_1 = require(\"./featureDetection\");\n\nconst fallbackServiceStub_1 = require(\"./fallbackServiceStub\");\n\nconst _1 = require(\".\");\n\nvar pathTemplate_1 = require(\"./pathTemplate\");\n\nObject.defineProperty(exports, \"PathTemplate\", {\n  enumerable: true,\n  get: function () {\n    return pathTemplate_1.PathTemplate;\n  }\n});\n\nvar gax_1 = require(\"./gax\");\n\nObject.defineProperty(exports, \"CallSettings\", {\n  enumerable: true,\n  get: function () {\n    return gax_1.CallSettings;\n  }\n});\nObject.defineProperty(exports, \"constructSettings\", {\n  enumerable: true,\n  get: function () {\n    return gax_1.constructSettings;\n  }\n});\nObject.defineProperty(exports, \"RetryOptions\", {\n  enumerable: true,\n  get: function () {\n    return gax_1.RetryOptions;\n  }\n});\nexports.version = require('../../package.json').version + '-fallback';\n\nvar descriptor_1 = require(\"./descriptor\");\n\nObject.defineProperty(exports, \"BundleDescriptor\", {\n  enumerable: true,\n  get: function () {\n    return descriptor_1.BundleDescriptor;\n  }\n});\nObject.defineProperty(exports, \"LongrunningDescriptor\", {\n  enumerable: true,\n  get: function () {\n    return descriptor_1.LongrunningDescriptor;\n  }\n});\nObject.defineProperty(exports, \"PageDescriptor\", {\n  enumerable: true,\n  get: function () {\n    return descriptor_1.PageDescriptor;\n  }\n});\nObject.defineProperty(exports, \"StreamDescriptor\", {\n  enumerable: true,\n  get: function () {\n    return descriptor_1.StreamDescriptor;\n  }\n});\n\nvar streaming_1 = require(\"./streamingCalls/streaming\");\n\nObject.defineProperty(exports, \"StreamType\", {\n  enumerable: true,\n  get: function () {\n    return streaming_1.StreamType;\n  }\n});\nexports.defaultToObjectOptions = {\n  keepCase: false,\n  longs: String,\n  enums: String,\n  defaults: true,\n  oneofs: true\n};\nconst CLIENT_VERSION_HEADER = 'x-goog-api-client';\n\nclass GrpcClient {\n  /**\n   * gRPC-fallback version of GrpcClient\n   * Implements GrpcClient API for a browser using grpc-fallback protocol (sends serialized protobuf to HTTP/1 $rpc endpoint).\n   *\n   * @param {Object=} options.auth - An instance of OAuth2Client to use in browser, or an instance of GoogleAuth from google-auth-library\n   *  to use in Node.js. Required for browser, optional for Node.js.\n   * @constructor\n   */\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (!featureDetection_1.isNodeJS()) {\n      if (!options.auth) {\n        throw new Error(JSON.stringify(options) + 'You need to pass auth instance to use gRPC-fallback client in browser or other non-Node.js environments. Use OAuth2Client from google-auth-library.');\n      }\n\n      this.auth = options.auth;\n    } else {\n      this.auth = options.auth || new google_auth_library_1.GoogleAuth(options);\n    }\n\n    this.fallback = options.fallback !== 'rest' ? 'proto' : 'rest';\n    this.grpcVersion = require('../../package.json').version;\n  }\n  /**\n   * In rare cases users might need to deallocate all memory consumed by loaded protos.\n   * This method will delete the proto cache content.\n   */\n\n\n  static clearProtoCache() {\n    GrpcClient.protoCache.clear();\n  }\n  /**\n   * gRPC-fallback version of loadProto\n   * Loads the protobuf root object from a JSON object created from a proto file\n   * @param {Object} jsonObject - A JSON version of a protofile created usin protobuf.js\n   * @returns {Object} Root namespace of proto JSON\n   */\n\n\n  loadProto(jsonObject) {\n    const rootObject = protobuf.Root.fromJSON(jsonObject);\n    return rootObject;\n  }\n\n  loadProtoJSON(json) {\n    let ignoreCache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const hash = objectHash(json).toString();\n    const cached = GrpcClient.protoCache.get(hash);\n\n    if (cached && !ignoreCache) {\n      return cached;\n    }\n\n    const root = protobuf.Root.fromJSON(json);\n    GrpcClient.protoCache.set(hash, root);\n    return root;\n  }\n\n  static getServiceMethods(service) {\n    const methods = {};\n\n    for (const [methodName, methodObject] of Object.entries(service.methods)) {\n      const methodNameLowerCamelCase = methodName[0].toLowerCase() + methodName.substring(1);\n      methods[methodNameLowerCamelCase] = methodObject;\n    }\n\n    return methods;\n  }\n  /**\n   * gRPC-fallback version of constructSettings\n   * A wrapper of {@link constructSettings} function under the gRPC context.\n   *\n   * Most of parameters are common among constructSettings, please take a look.\n   * @param {string} serviceName - The fullly-qualified name of the service.\n   * @param {Object} clientConfig - A dictionary of the client config.\n   * @param {Object} configOverrides - A dictionary of overriding configs.\n   * @param {Object} headers - A dictionary of additional HTTP header name to\n   *   its value.\n   * @return {Object} A mapping of method names to CallSettings.\n   */\n\n\n  constructSettings(serviceName, clientConfig, configOverrides, headers) {\n    function buildMetadata(abTests, moreHeaders) {\n      const metadata = {};\n\n      if (!headers) {\n        headers = {};\n      } // Since gRPC expects each header to be an array,\n      // we are doing the same for fallback here.\n\n\n      for (const key in headers) {\n        metadata[key] = Array.isArray(headers[key]) ? headers[key] : [headers[key]];\n      } // gRPC-fallback request must have 'grpc-web/' in 'x-goog-api-client'\n\n\n      const clientVersions = [];\n\n      if (metadata[CLIENT_VERSION_HEADER] && metadata[CLIENT_VERSION_HEADER][0]) {\n        clientVersions.push(...metadata[CLIENT_VERSION_HEADER][0].split(' '));\n      }\n\n      clientVersions.push(`grpc-web/${exports.version}`);\n      metadata[CLIENT_VERSION_HEADER] = [clientVersions.join(' ')];\n\n      if (!moreHeaders) {\n        return metadata;\n      }\n\n      for (const key in moreHeaders) {\n        if (key.toLowerCase() !== CLIENT_VERSION_HEADER) {\n          const value = moreHeaders[key];\n\n          if (Array.isArray(value)) {\n            if (metadata[key] === undefined) {\n              metadata[key] = value;\n            } else {\n              if (Array.isArray(metadata[key])) {\n                metadata[key].push(...value);\n              } else {\n                throw new Error(`Can not add value ${value} to the call metadata.`);\n              }\n            }\n          } else {\n            metadata[key] = [value];\n          }\n        }\n      }\n\n      return metadata;\n    }\n\n    return gax.constructSettings(serviceName, clientConfig, configOverrides, status_1.Status, {\n      metadataBuilder: buildMetadata\n    });\n  }\n  /**\n   * gRPC-fallback version of createStub\n   * Creates a gRPC-fallback stub with authentication headers built from supplied OAuth2Client instance\n   *\n   * @param {function} CreateStub - The constructor function of the stub.\n   * @param {Object} service - A protobufjs Service object (as returned by lookupService)\n   * @param {Object} opts - Connection options, as described below.\n   * @param {string} opts.servicePath - The hostname of the API endpoint service.\n   * @param {number} opts.port - The port of the service.\n   * @return {Promise} A promise which resolves to a gRPC-fallback service stub, which is a protobuf.js service stub instance modified to match the gRPC stub API\n   */\n\n\n  async createStub(service, opts, // For consistency with createStub in grpc.ts, customServicePath is defined:\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  customServicePath) {\n    if (!this.authClient) {\n      if (this.auth && 'getClient' in this.auth) {\n        this.authClient = await this.auth.getClient();\n      } else if (this.auth && 'getRequestHeaders' in this.auth) {\n        this.authClient = this.auth;\n      }\n    }\n\n    if (!this.authClient) {\n      throw new Error('No authentication was provided');\n    }\n\n    service.resolveAll();\n    const methods = GrpcClient.getServiceMethods(service);\n    const protocol = opts.protocol || 'https';\n    let servicePath = opts.servicePath;\n\n    if (!servicePath && service.options && service.options['(google.api.default_host)']) {\n      servicePath = service.options['(google.api.default_host)'];\n    }\n\n    if (!servicePath) {\n      throw new Error(`Cannot determine service API path for service ${service.name}.`);\n    }\n\n    let servicePort;\n    const match = servicePath.match(/^(.*):(\\d+)$/);\n\n    if (match) {\n      servicePath = match[1];\n      servicePort = parseInt(match[2]);\n    }\n\n    if (opts.port) {\n      servicePort = opts.port;\n    } else if (!servicePort) {\n      servicePort = 443;\n    }\n\n    const encoder = this.fallback === 'rest' ? fallbackRest.encodeRequest : fallbackProto.encodeRequest;\n    const decoder = this.fallback === 'rest' ? fallbackRest.decodeResponse : fallbackProto.decodeResponse;\n    const serviceStub = fallbackServiceStub_1.generateServiceStub(methods, protocol, servicePath, servicePort, this.authClient, encoder, decoder);\n    return serviceStub;\n  }\n\n}\n\nexports.GrpcClient = GrpcClient;\nGrpcClient.protoCache = new Map();\n/**\n * gRPC-fallback version of lro\n *\n * @param {Object=} options.auth - An instance of google-auth-library.\n * @return {Object} A OperationsClientBuilder that will return a OperationsClient\n */\n\nfunction lro(options) {\n  options = Object.assign({\n    scopes: []\n  }, options);\n  const gaxGrpc = new GrpcClient(options);\n  return new operationsClient_1.OperationsClientBuilder(gaxGrpc);\n}\n\nexports.lro = lro;\n/**\n * gRPC-fallback version of createApiCall\n *\n * Converts an rpc call into an API call governed by the settings.\n *\n * In typical usage, `func` will be a promise to a callable used to make an rpc\n * request. This will mostly likely be a bound method from a request stub used\n * to make an rpc call. It is not a direct function but a Promise instance,\n * because of its asynchronism (typically, obtaining the auth information).\n *\n * The result is a function which manages the API call with the given settings\n * and the options on the invocation.\n *\n * Throws exception on unsupported streaming calls\n *\n * @param {Promise<GRPCCall>|GRPCCall} func - is either a promise to be used to make\n *   a bare RPC call, or just a bare RPC call.\n * @param {CallSettings} settings - provides the settings for this call\n * @param {Descriptor} descriptor - optionally specify the descriptor for\n *   the method call.\n * @return {GaxCall} func - a bound method on a request stub used\n *   to make an rpc call.\n */\n\nfunction createApiCall(func, settings, descriptor) {\n  if (descriptor && 'streaming' in descriptor && descriptor.type !== _1.StreamType.SERVER_STREAMING) {\n    return () => {\n      throw new Error('The gRPC-fallback client library (e.g. browser version of the library) currently does not support client-streaming or bidi-stream calls.');\n    };\n  }\n\n  return createApiCall_1.createApiCall(func, settings, descriptor);\n}\n\nexports.createApiCall = createApiCall;\nexports.protobufMinimal = require(\"protobufjs/minimal\"); // Different environments or bundlers may or may not respect \"browser\" field\n// in package.json (e.g. Electron does not respect it, but if you run the code\n// through webpack first, it will follow the \"browser\" field).\n// To make it safer and more compatible, let's make sure that if you do\n// const gax = require(\"google-gax\");\n// you can always ask for gax.fallback, regardless of \"browser\" field being\n// understood or not.\n\nconst fallback = module.exports;\nexports.fallback = fallback;","map":{"version":3,"mappings":"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","names":["exports","Object","enumerable","get","require","version","keepCase","longs","String","enums","defaults","oneofs","CLIENT_VERSION_HEADER","GrpcClient","constructor","options","featureDetection_1","auth","Error","JSON","stringify","google_auth_library_1","fallback","grpcVersion","clearProtoCache","protoCache","clear","loadProto","jsonObject","rootObject","protobuf","Root","fromJSON","loadProtoJSON","json","ignoreCache","hash","objectHash","toString","cached","root","set","getServiceMethods","service","methods","methodName","methodObject","entries","methodNameLowerCamelCase","toLowerCase","substring","constructSettings","serviceName","clientConfig","configOverrides","headers","buildMetadata","abTests","moreHeaders","metadata","key","Array","isArray","clientVersions","push","split","join","value","undefined","gax","status_1","metadataBuilder","createStub","opts","customServicePath","authClient","getClient","resolveAll","protocol","servicePath","name","servicePort","match","parseInt","port","encoder","fallbackRest","encodeRequest","fallbackProto","decoder","decodeResponse","serviceStub","fallbackServiceStub_1","Map","lro","assign","scopes","gaxGrpc","operationsClient_1","createApiCall","func","settings","descriptor","type","_1","SERVER_STREAMING","createApiCall_1","module"],"sources":["../../src/fallback.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}