{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Task = exports.deepCopyForResponse = void 0;\n\nconst status_1 = require(\"../status\");\n\nconst googleError_1 = require(\"../googleError\");\n/**\n * Creates a deep copy of the object with the consideration of subresponse\n * fields for bundling.\n *\n * @param {Object} obj - The source object.\n * @param {Object?} subresponseInfo - The information to copy the subset of\n *   the field for the response. Do nothing if it's null.\n * @param {String} subresponseInfo.field - The field name.\n * @param {number} subresponseInfo.start - The offset where the copying\n *   element should starts with.\n * @param {number} subresponseInfo.end - The ending index where the copying\n *   region of the elements ends.\n * @return {Object} The copied object.\n * @private\n */\n\n\nfunction deepCopyForResponse( // eslint-disable-next-line @typescript-eslint/no-explicit-any\nobj, subresponseInfo) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let result;\n\n  if (obj === null) {\n    return null;\n  }\n\n  if (obj === undefined) {\n    return undefined;\n  }\n\n  if (Array.isArray(obj)) {\n    result = [];\n    obj.forEach(element => {\n      result.push(deepCopyForResponse(element, null));\n    });\n    return result;\n  } // Some objects (such as ByteBuffer) have copy method.\n\n\n  if (obj.copy !== undefined) {\n    return obj.copy();\n  } // ArrayBuffer should be copied through slice().\n\n\n  if (obj instanceof ArrayBuffer) {\n    return obj.slice(0);\n  }\n\n  if (typeof obj === 'object') {\n    result = {};\n    Object.keys(obj).forEach(key => {\n      if (subresponseInfo && key === subresponseInfo.field && Array.isArray(obj[key])) {\n        // Note that subresponses are not deep-copied. This is safe because\n        // those subresponses are not shared among callbacks.\n        result[key] = obj[key].slice(subresponseInfo.start, subresponseInfo.end);\n      } else {\n        result[key] = deepCopyForResponse(obj[key], null);\n      }\n    });\n    return result;\n  }\n\n  return obj;\n}\n\nexports.deepCopyForResponse = deepCopyForResponse;\n\nclass Task {\n  /**\n   * A task coordinates the execution of a single bundle.\n   *\n   * @param {function} apiCall - The function to conduct calling API.\n   * @param {Object} bundlingRequest - The base request object to be used\n   *   for the actual API call.\n   * @param {string} bundledField - The name of the field in bundlingRequest\n   *   to be bundled.\n   * @param {string=} subresponseField - The name of the field in the response\n   *   to be passed to the callback.\n   * @constructor\n   * @private\n   */\n  constructor(apiCall, bundlingRequest, bundledField, subresponseField) {\n    this._apiCall = apiCall;\n    this._request = bundlingRequest;\n    this._bundledField = bundledField;\n    this._subresponseField = subresponseField;\n    this._data = [];\n  }\n  /**\n   * Returns the number of elements in a task.\n   * @return {number} The number of elements.\n   */\n\n\n  getElementCount() {\n    let count = 0;\n\n    for (let i = 0; i < this._data.length; ++i) {\n      count += this._data[i].elements.length;\n    }\n\n    return count;\n  }\n  /**\n   * Returns the total byte size of the elements in a task.\n   * @return {number} The byte size.\n   */\n\n\n  getRequestByteSize() {\n    let size = 0;\n\n    for (let i = 0; i < this._data.length; ++i) {\n      size += this._data[i].bytes;\n    }\n\n    return size;\n  }\n  /**\n   * Invokes the actual API call with current elements.\n   * @return {string[]} - the list of ids for invocations to be run.\n   */\n\n\n  run() {\n    if (this._data.length === 0) {\n      return [];\n    }\n\n    const request = this._request;\n    const elements = [];\n    const ids = [];\n\n    for (let i = 0; i < this._data.length; ++i) {\n      elements.push(...this._data[i].elements);\n      ids.push(this._data[i].callback.id);\n    }\n\n    request[this._bundledField] = elements; // eslint-disable-next-line @typescript-eslint/no-this-alias\n\n    const self = this;\n    this.callCanceller = this._apiCall(request, (err, response) => {\n      const responses = [];\n\n      if (err) {\n        self._data.forEach(() => {\n          responses.push(undefined);\n        });\n      } else {\n        let subresponseInfo = null;\n\n        if (self._subresponseField) {\n          subresponseInfo = {\n            field: self._subresponseField,\n            start: 0\n          };\n        }\n\n        self._data.forEach(data => {\n          if (subresponseInfo) {\n            subresponseInfo.end = subresponseInfo.start + data.elements.length;\n          }\n\n          responses.push(deepCopyForResponse(response, subresponseInfo));\n\n          if (subresponseInfo) {\n            subresponseInfo.start = subresponseInfo.end;\n          }\n        });\n      }\n\n      for (let i = 0; i < self._data.length; ++i) {\n        if (self._data[i].cancelled) {\n          const error = new googleError_1.GoogleError('cancelled');\n          error.code = status_1.Status.CANCELLED;\n\n          self._data[i].callback(error);\n        } else {\n          self._data[i].callback(err, responses[i]);\n        }\n      }\n    });\n    return ids;\n  }\n  /**\n   * Appends the list of elements into the task.\n   * @param {Object[]} elements - the new list of elements.\n   * @param {number} bytes - the byte size required to encode elements in the API.\n   * @param {APICallback} callback - the callback of the method call.\n   */\n\n\n  extend(elements, bytes, callback) {\n    this._data.push({\n      elements,\n      bytes,\n      callback\n    });\n  }\n  /**\n   * Cancels a part of elements.\n   * @param {string} id - The identifier of the part of elements.\n   * @return {boolean} Whether the entire task will be canceled or not.\n   */\n\n\n  cancel(id) {\n    if (this.callCanceller) {\n      let allCancelled = true;\n\n      this._data.forEach(d => {\n        if (d.callback.id === id) {\n          d.cancelled = true;\n        }\n\n        if (!d.cancelled) {\n          allCancelled = false;\n        }\n      });\n\n      if (allCancelled) {\n        this.callCanceller.cancel();\n      }\n\n      return allCancelled;\n    }\n\n    for (let i = 0; i < this._data.length; ++i) {\n      if (this._data[i].callback.id === id) {\n        const error = new googleError_1.GoogleError('cancelled');\n        error.code = status_1.Status.CANCELLED;\n\n        this._data[i].callback(error);\n\n        this._data.splice(i, 1);\n\n        break;\n      }\n    }\n\n    return this._data.length === 0;\n  }\n\n}\n\nexports.Task = Task;","map":{"version":3,"mappings":"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","names":["deepCopyForResponse","obj","subresponseInfo","result","undefined","Array","isArray","forEach","element","push","copy","ArrayBuffer","slice","Object","keys","key","field","start","end","exports","Task","constructor","apiCall","bundlingRequest","bundledField","subresponseField","_apiCall","_request","_bundledField","_subresponseField","_data","getElementCount","count","i","length","elements","getRequestByteSize","size","bytes","run","request","ids","callback","id","self","callCanceller","err","response","responses","data","cancelled","error","googleError_1","code","status_1","CANCELLED","extend","cancel","allCancelled","d","splice"],"sources":["../../../src/bundlingCalls/task.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}