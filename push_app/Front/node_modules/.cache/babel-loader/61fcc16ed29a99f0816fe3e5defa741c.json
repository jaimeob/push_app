{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.operation = exports.Operation = void 0;\n\nconst events_1 = require(\"events\");\n\nconst status_1 = require(\"../status\");\n\nconst googleError_1 = require(\"../googleError\");\n\nconst operationProtos = require(\"../../protos/operations\");\n\nclass Operation extends events_1.EventEmitter {\n  /**\n   * Wrapper for a google.longrunnung.Operation.\n   *\n   * @constructor\n   *\n   * @param {google.longrunning.Operation} grpcOp - The operation to be wrapped.\n   * @param {LongRunningDescriptor} longrunningDescriptor - This defines the\n   * operations service client and unpacking mechanisms for the operation.\n   * @param {BackoffSettings} backoffSettings - The backoff settings used in\n   * in polling the operation.\n   * @param {CallOptions} callOptions - CallOptions used in making get operation\n   * requests.\n   */\n  constructor(grpcOp, longrunningDescriptor, backoffSettings, callOptions) {\n    super();\n    this.completeListeners = 0;\n    this.hasActiveListeners = false;\n    this.latestResponse = grpcOp;\n    this.name = this.latestResponse.name;\n    this.done = this.latestResponse.done;\n    this.error = this.latestResponse.error;\n    this.longrunningDescriptor = longrunningDescriptor;\n    this.result = null;\n    this.metadata = null;\n    this.backoffSettings = backoffSettings;\n\n    this._unpackResponse(grpcOp);\n\n    this._listenForEvents();\n\n    this._callOptions = callOptions;\n  }\n  /**\n   * Begin listening for events on the operation. This method keeps track of how\n   * many \"complete\" listeners are registered and removed, making sure polling\n   * is handled automatically.\n   *\n   * As long as there is one active \"complete\" listener, the connection is open.\n   * When there are no more listeners, the polling stops.\n   *\n   * @private\n   */\n\n\n  _listenForEvents() {\n    this.on('newListener', event => {\n      if (event === 'complete') {\n        this.completeListeners++;\n\n        if (!this.hasActiveListeners) {\n          this.hasActiveListeners = true;\n          this.startPolling_();\n        }\n      }\n    });\n    this.on('removeListener', event => {\n      if (event === 'complete' && --this.completeListeners === 0) {\n        this.hasActiveListeners = false;\n      }\n    });\n  }\n  /**\n   * Cancels current polling api call and cancels the operation.\n   *\n   * @return {Promise} the promise of the OperationsClient#cancelOperation api\n   * request.\n   */\n\n\n  cancel() {\n    if (this.currentCallPromise_) {\n      this.currentCallPromise_.cancel();\n    }\n\n    const operationsClient = this.longrunningDescriptor.operationsClient;\n    const cancelRequest = new operationProtos.google.longrunning.CancelOperationRequest();\n    cancelRequest.name = this.latestResponse.name;\n    return operationsClient.cancelOperation(cancelRequest);\n  }\n\n  getOperation(callback) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self = this;\n    const operationsClient = this.longrunningDescriptor.operationsClient;\n\n    function promisifyResponse() {\n      if (!callback) {\n        return new Promise((resolve, reject) => {\n          if (self.latestResponse.error) {\n            const error = new googleError_1.GoogleError(self.latestResponse.error.message);\n            error.code = self.latestResponse.error.code;\n            reject(error);\n          } else {\n            resolve([self.result, self.metadata, self.latestResponse]);\n          }\n        });\n      }\n\n      return;\n    }\n\n    if (this.latestResponse.done) {\n      this._unpackResponse(this.latestResponse, callback);\n\n      return promisifyResponse();\n    }\n\n    const request = new operationProtos.google.longrunning.GetOperationRequest();\n    request.name = this.latestResponse.name;\n    this.currentCallPromise_ = operationsClient.getOperationInternal(request, this._callOptions);\n    const noCallbackPromise = this.currentCallPromise_.then(responses => {\n      self.latestResponse = responses[0];\n\n      self._unpackResponse(responses[0], callback);\n\n      return promisifyResponse();\n    });\n\n    if (!callback) {\n      return noCallbackPromise;\n    }\n  }\n\n  _unpackResponse(op, callback) {\n    const responseDecoder = this.longrunningDescriptor.responseDecoder;\n    const metadataDecoder = this.longrunningDescriptor.metadataDecoder;\n    let response;\n    let metadata;\n\n    if (op.done) {\n      if (op.result === 'error') {\n        const error = new googleError_1.GoogleError(op.error.message);\n        error.code = op.error.code;\n        this.error = error;\n\n        if (callback) {\n          callback(error);\n        }\n\n        return;\n      }\n\n      if (responseDecoder && op.response) {\n        this.response = op.response;\n        response = responseDecoder(op.response.value);\n        this.result = response;\n        this.done = true;\n      }\n    }\n\n    if (metadataDecoder && op.metadata) {\n      metadata = metadataDecoder(op.metadata.value);\n      this.metadata = metadata;\n    }\n\n    if (callback) {\n      callback(null, response, metadata, op);\n    }\n  }\n  /**\n   * Poll `getOperation` to check the operation's status. This runs a loop to\n   * ping using the backoff strategy specified at initialization.\n   *\n   * Note: This method is automatically called once a \"complete\" event handler\n   * is registered on the operation.\n   *\n   * @private\n   */\n\n\n  startPolling_() {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self = this;\n    let now = new Date();\n    const delayMult = this.backoffSettings.retryDelayMultiplier;\n    const maxDelay = this.backoffSettings.maxRetryDelayMillis;\n    let delay = this.backoffSettings.initialRetryDelayMillis;\n    let deadline = Infinity;\n\n    if (this.backoffSettings.totalTimeoutMillis) {\n      deadline = now.getTime() + this.backoffSettings.totalTimeoutMillis;\n    }\n\n    let previousMetadataBytes;\n\n    if (this.latestResponse.metadata) {\n      previousMetadataBytes = this.latestResponse.metadata.value;\n    } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n    function emit(event) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      self.emit(event, ...args);\n    } // Helper function to replace nodejs buffer's equals()\n\n\n    function arrayEquals(a, b) {\n      if (a.byteLength !== b.byteLength) {\n        return false;\n      }\n\n      for (let i = 0; i < a.byteLength; ++i) {\n        if (a[i] !== b[i]) return false;\n      }\n\n      return true;\n    }\n\n    function retry() {\n      if (!self.hasActiveListeners) {\n        return;\n      }\n\n      if (now.getTime() >= deadline) {\n        const error = new googleError_1.GoogleError('Total timeout exceeded before any response was received');\n        error.code = status_1.Status.DEADLINE_EXCEEDED;\n        setImmediate(emit, 'error', error);\n        return;\n      }\n\n      self.getOperation((err, result, metadata, rawResponse) => {\n        if (err) {\n          setImmediate(emit, 'error', err);\n          return;\n        }\n\n        if (!result) {\n          if (rawResponse.metadata && (!previousMetadataBytes || rawResponse && !arrayEquals(rawResponse.metadata.value, previousMetadataBytes))) {\n            setImmediate(emit, 'progress', metadata, rawResponse);\n            previousMetadataBytes = rawResponse.metadata.value;\n          } // special case: some APIs fail to set either result or error\n          // but set done = true (e.g. speech with silent file).\n          // Some APIs just use this for the normal completion\n          // (e.g. nodejs-contact-center-insights), so let's just return\n          // an empty response in this case.\n\n\n          if (rawResponse.done) {\n            setImmediate(emit, 'complete', {}, metadata, rawResponse);\n            return;\n          }\n\n          setTimeout(() => {\n            now = new Date();\n            delay = Math.min(delay * delayMult, maxDelay);\n            retry();\n          }, delay);\n          return;\n        }\n\n        setImmediate(emit, 'complete', result, metadata, rawResponse);\n      });\n    }\n\n    retry();\n  }\n  /**\n   * Wraps the `complete` and `error` events in a Promise.\n   *\n   * @return {promise} - Promise that resolves on operation completion and rejects\n   * on operation error.\n   */\n\n\n  promise() {\n    return new Promise((resolve, reject) => {\n      this.on('error', reject).on('complete', (result, metadata, rawResponse) => {\n        resolve([result, metadata, rawResponse]);\n      });\n    });\n  }\n\n}\n\nexports.Operation = Operation;\n/**\n * Method used to create Operation objects.\n *\n * @constructor\n *\n * @param {google.longrunning.Operation} op - The operation to be wrapped.\n * @param {LongRunningDescriptor} longrunningDescriptor - This defines the\n * operations service client and unpacking mechanisms for the operation.\n * @param {BackoffSettings} backoffSettings - The backoff settings used in\n * in polling the operation.\n * @param {CallOptions=} callOptions - CallOptions used in making get operation\n * requests.\n */\n\nfunction operation(op, longrunningDescriptor, backoffSettings, callOptions) {\n  return new Operation(op, longrunningDescriptor, backoffSettings, callOptions);\n}\n\nexports.operation = operation;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;AAgBA;;AACA;;AAKA;;AAGA;;AAoBA,MAAaA,SAAb,SAA+BC,qBAA/B,CAA2C;AAezC;;;;;;;;;;;;;AAaAC,cACEC,MADF,EAEEC,qBAFF,EAGEC,eAHF,EAIEC,WAJF,EAI2B;AAEzB;AACA,SAAKC,iBAAL,GAAyB,CAAzB;AACA,SAAKC,kBAAL,GAA0B,KAA1B;AACA,SAAKC,cAAL,GAAsBN,MAAtB;AACA,SAAKO,IAAL,GAAY,KAAKD,cAAL,CAAoBC,IAAhC;AACA,SAAKC,IAAL,GAAY,KAAKF,cAAL,CAAoBE,IAAhC;AACA,SAAKC,KAAL,GAAa,KAAKH,cAAL,CAAoBG,KAAjC;AACA,SAAKR,qBAAL,GAA6BA,qBAA7B;AACA,SAAKS,MAAL,GAAc,IAAd;AACA,SAAKC,QAAL,GAAgB,IAAhB;AACA,SAAKT,eAAL,GAAuBA,eAAvB;;AACA,SAAKU,eAAL,CAAqBZ,MAArB;;AACA,SAAKa,gBAAL;;AACA,SAAKC,YAAL,GAAoBX,WAApB;AACD;AAED;;;;;;;;;;;;AAUAU,kBAAgB;AACd,SAAKE,EAAL,CAAQ,aAAR,EAAuBC,KAAK,IAAG;AAC7B,UAAIA,KAAK,KAAK,UAAd,EAA0B;AACxB,aAAKZ,iBAAL;;AAEA,YAAI,CAAC,KAAKC,kBAAV,EAA8B;AAC5B,eAAKA,kBAAL,GAA0B,IAA1B;AACA,eAAKY,aAAL;AACD;AACF;AACF,KATD;AAWA,SAAKF,EAAL,CAAQ,gBAAR,EAA0BC,KAAK,IAAG;AAChC,UAAIA,KAAK,KAAK,UAAV,IAAwB,EAAE,KAAKZ,iBAAP,KAA6B,CAAzD,EAA4D;AAC1D,aAAKC,kBAAL,GAA0B,KAA1B;AACD;AACF,KAJD;AAKD;AAED;;;;;;;;AAMAa,QAAM;AACJ,QAAI,KAAKC,mBAAT,EAA8B;AAC5B,WAAKA,mBAAL,CAAyBD,MAAzB;AACD;;AACD,UAAME,gBAAgB,GAAG,KAAKnB,qBAAL,CAA2BmB,gBAApD;AACA,UAAMC,aAAa,GACjB,IAAIC,eAAe,CAACC,MAAhB,CAAuBC,WAAvB,CAAmCC,sBAAvC,EADF;AAEAJ,iBAAa,CAACd,IAAd,GAAqB,KAAKD,cAAL,CAAoBC,IAAzC;AACA,WAAOa,gBAAgB,CAACM,eAAjB,CAAiCL,aAAjC,CAAP;AACD;;AAoBDM,cAAY,CAACC,QAAD,EAAgC;AAC1C;AACA,UAAMC,IAAI,GAAG,IAAb;AACA,UAAMT,gBAAgB,GAAG,KAAKnB,qBAAL,CAA2BmB,gBAApD;;AAEA,aAASU,iBAAT,GAA0B;AACxB,UAAI,CAACF,QAAL,EAAe;AACb,eAAO,IAAIG,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAoB;AACrC,cAAIJ,IAAI,CAACvB,cAAL,CAAoBG,KAAxB,EAA+B;AAC7B,kBAAMA,KAAK,GAAG,IAAIyB,yBAAJ,CAAgBL,IAAI,CAACvB,cAAL,CAAoBG,KAApB,CAA0B0B,OAA1C,CAAd;AACA1B,iBAAK,CAAC2B,IAAN,GAAaP,IAAI,CAACvB,cAAL,CAAoBG,KAApB,CAA0B2B,IAAvC;AACAH,kBAAM,CAACxB,KAAD,CAAN;AACD,WAJD,MAIO;AACLuB,mBAAO,CAAC,CAACH,IAAI,CAACnB,MAAN,EAAcmB,IAAI,CAAClB,QAAnB,EAA6BkB,IAAI,CAACvB,cAAlC,CAAD,CAAP;AACD;AACF,SARM,CAAP;AASD;;AACD;AACD;;AAED,QAAI,KAAKA,cAAL,CAAoBE,IAAxB,EAA8B;AAC5B,WAAKI,eAAL,CAAqB,KAAKN,cAA1B,EAA0CsB,QAA1C;;AACA,aAAOE,iBAAiB,EAAxB;AACD;;AACD,UAAMO,OAAO,GACX,IAAIf,eAAe,CAACC,MAAhB,CAAuBC,WAAvB,CAAmCc,mBAAvC,EADF;AAEAD,WAAO,CAAC9B,IAAR,GAAe,KAAKD,cAAL,CAAoBC,IAAnC;AACA,SAAKY,mBAAL,GAA2BC,gBAAgB,CAACmB,oBAAjB,CACzBF,OADyB,EAEzB,KAAKvB,YAFoB,CAA3B;AAKA,UAAM0B,iBAAiB,GAAG,KAAKrB,mBAAL,CAA0BsB,IAA1B,CAA+BC,SAAS,IAAG;AACnEb,UAAI,CAACvB,cAAL,GAAsBoC,SAAS,CAAC,CAAD,CAA/B;;AACAb,UAAI,CAACjB,eAAL,CAAqB8B,SAAS,CAAC,CAAD,CAA9B,EAAmDd,QAAnD;;AACA,aAAOE,iBAAiB,EAAxB;AACD,KAJyB,CAA1B;;AAMA,QAAI,CAACF,QAAL,EAAe;AACb,aAAOY,iBAAP;AACD;AACF;;AAED5B,iBAAe,CAAC+B,EAAD,EAAmBf,QAAnB,EAAkD;AAC/D,UAAMgB,eAAe,GAAG,KAAK3C,qBAAL,CAA2B2C,eAAnD;AACA,UAAMC,eAAe,GAAG,KAAK5C,qBAAL,CAA2B4C,eAAnD;AACA,QAAIC,QAAJ;AACA,QAAInC,QAAJ;;AAEA,QAAIgC,EAAE,CAACnC,IAAP,EAAa;AACX,UAAImC,EAAE,CAACjC,MAAH,KAAc,OAAlB,EAA2B;AACzB,cAAMD,KAAK,GAAG,IAAIyB,yBAAJ,CAAgBS,EAAE,CAAClC,KAAH,CAAU0B,OAA1B,CAAd;AACA1B,aAAK,CAAC2B,IAAN,GAAaO,EAAE,CAAClC,KAAH,CAAU2B,IAAvB;AACA,aAAK3B,KAAL,GAAaA,KAAb;;AACA,YAAImB,QAAJ,EAAc;AACZA,kBAAQ,CAACnB,KAAD,CAAR;AACD;;AACD;AACD;;AAED,UAAImC,eAAe,IAAID,EAAE,CAACG,QAA1B,EAAoC;AAClC,aAAKA,QAAL,GAAgBH,EAAE,CAACG,QAAnB;AACAA,gBAAQ,GAAGF,eAAe,CAACD,EAAE,CAACG,QAAH,CAAYC,KAAb,CAA1B;AACA,aAAKrC,MAAL,GAAcoC,QAAd;AACA,aAAKtC,IAAL,GAAY,IAAZ;AACD;AACF;;AAED,QAAIqC,eAAe,IAAIF,EAAE,CAAChC,QAA1B,EAAoC;AAClCA,cAAQ,GAAGkC,eAAe,CAACF,EAAE,CAAChC,QAAH,CAAYoC,KAAb,CAA1B;AACA,WAAKpC,QAAL,GAAgBA,QAAhB;AACD;;AACD,QAAIiB,QAAJ,EAAc;AACZA,cAAQ,CAAC,IAAD,EAAOkB,QAAP,EAAkBnC,QAAlB,EAA6BgC,EAA7B,CAAR;AACD;AACF;AAED;;;;;;;;;;;AASA1B,eAAa;AACX;AACA,UAAMY,IAAI,GAAG,IAAb;AAEA,QAAImB,GAAG,GAAG,IAAIC,IAAJ,EAAV;AACA,UAAMC,SAAS,GAAG,KAAKhD,eAAL,CAAqBiD,oBAAvC;AACA,UAAMC,QAAQ,GAAG,KAAKlD,eAAL,CAAqBmD,mBAAtC;AACA,QAAIC,KAAK,GAAG,KAAKpD,eAAL,CAAqBqD,uBAAjC;AACA,QAAIC,QAAQ,GAAGC,QAAf;;AACA,QAAI,KAAKvD,eAAL,CAAqBwD,kBAAzB,EAA6C;AAC3CF,cAAQ,GAAGR,GAAG,CAACW,OAAJ,KAAgB,KAAKzD,eAAL,CAAqBwD,kBAAhD;AACD;;AACD,QAAIE,qBAAJ;;AACA,QAAI,KAAKtD,cAAL,CAAoBK,QAAxB,EAAkC;AAChCiD,2BAAqB,GAAG,KAAKtD,cAAL,CAAoBK,QAApB,CAA6BoC,KAArD;AACD,KAfU,CAiBX;;;AACA,aAASc,IAAT,CAAc7C,KAAd,EAAoD;AAAA,wCAAX8C,IAAW;AAAXA,YAAW;AAAA;;AAClDjC,UAAI,CAACgC,IAAL,CAAU7C,KAAV,EAAiB,GAAG8C,IAApB;AACD,KApBU,CAsBX;;;AACA,aAASC,WAAT,CAAqBC,CAArB,EAAoCC,CAApC,EAAiD;AAC/C,UAAID,CAAC,CAACE,UAAF,KAAiBD,CAAC,CAACC,UAAvB,EAAmC;AACjC,eAAO,KAAP;AACD;;AACD,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,CAAC,CAACE,UAAtB,EAAkC,EAAEC,CAApC,EAAuC;AACrC,YAAIH,CAAC,CAACG,CAAD,CAAD,KAASF,CAAC,CAACE,CAAD,CAAd,EAAmB,OAAO,KAAP;AACpB;;AACD,aAAO,IAAP;AACD;;AAED,aAASC,KAAT,GAAc;AACZ,UAAI,CAACvC,IAAI,CAACxB,kBAAV,EAA8B;AAC5B;AACD;;AAED,UAAI2C,GAAG,CAACW,OAAJ,MAAiBH,QAArB,EAA+B;AAC7B,cAAM/C,KAAK,GAAG,IAAIyB,yBAAJ,CACZ,yDADY,CAAd;AAGAzB,aAAK,CAAC2B,IAAN,GAAaiC,gBAAOC,iBAApB;AACAC,oBAAY,CAACV,IAAD,EAAO,OAAP,EAAgBpD,KAAhB,CAAZ;AACA;AACD;;AAEDoB,UAAI,CAACF,YAAL,CAAkB,CAAC6C,GAAD,EAAM9D,MAAN,EAAcC,QAAd,EAAwB8D,WAAxB,KAAuC;AACvD,YAAID,GAAJ,EAAS;AACPD,sBAAY,CAACV,IAAD,EAAO,OAAP,EAAgBW,GAAhB,CAAZ;AACA;AACD;;AAED,YAAI,CAAC9D,MAAL,EAAa;AACX,cACE+D,WAAY,CAAC9D,QAAb,KACC,CAACiD,qBAAD,IACEa,WAAW,IACV,CAACV,WAAW,CACVU,WAAW,CAAC9D,QAAZ,CAAqBoC,KADX,EAEVa,qBAFU,CAHhB,CADF,EAQE;AACAW,wBAAY,CAACV,IAAD,EAAO,UAAP,EAAmBlD,QAAnB,EAA6B8D,WAA7B,CAAZ;AACAb,iCAAqB,GAAGa,WAAY,CAAC9D,QAAb,CAAuBoC,KAA/C;AACD,WAZU,CAaX;AACA;AACA;AACA;AACA;;;AACA,cAAI0B,WAAY,CAACjE,IAAjB,EAAuB;AACrB+D,wBAAY,CAACV,IAAD,EAAO,UAAP,EAAmB,EAAnB,EAAuBlD,QAAvB,EAAiC8D,WAAjC,CAAZ;AACA;AACD;;AACDC,oBAAU,CAAC,MAAK;AACd1B,eAAG,GAAG,IAAIC,IAAJ,EAAN;AACAK,iBAAK,GAAGqB,IAAI,CAACC,GAAL,CAAStB,KAAK,GAAGJ,SAAjB,EAA4BE,QAA5B,CAAR;AACAgB,iBAAK;AACN,WAJS,EAIPd,KAJO,CAAV;AAKA;AACD;;AAEDiB,oBAAY,CAACV,IAAD,EAAO,UAAP,EAAmBnD,MAAnB,EAA2BC,QAA3B,EAAqC8D,WAArC,CAAZ;AACD,OArCD;AAsCD;;AACDL,SAAK;AACN;AAED;;;;;;;;AAMAS,SAAO;AACL,WAAO,IAAI9C,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAoB;AACrC,WAAKlB,EAAL,CAAQ,OAAR,EAAiBkB,MAAjB,EAAyBlB,EAAzB,CACE,UADF,EAEE,CAACL,MAAD,EAASC,QAAT,EAAmB8D,WAAnB,KAAkC;AAChCzC,eAAO,CAAC,CAACtB,MAAD,EAASC,QAAT,EAAmB8D,WAAnB,CAAD,CAAP;AACD,OAJH;AAMD,KAPM,CAAP;AAQD;;AAhTwC;;AAA3CK;AAmTA;;;;;;;;;;;;;;AAaA,SAAgBC,SAAhB,CACEpC,EADF,EAEE1C,qBAFF,EAGEC,eAHF,EAIEC,WAJF,EAI2B;AAEzB,SAAO,IAAIN,SAAJ,CAAc8C,EAAd,EAAkB1C,qBAAlB,EAAyCC,eAAzC,EAA0DC,WAA1D,CAAP;AACD;;AAPD2E","names":["Operation","events_1","constructor","grpcOp","longrunningDescriptor","backoffSettings","callOptions","completeListeners","hasActiveListeners","latestResponse","name","done","error","result","metadata","_unpackResponse","_listenForEvents","_callOptions","on","event","startPolling_","cancel","currentCallPromise_","operationsClient","cancelRequest","operationProtos","google","longrunning","CancelOperationRequest","cancelOperation","getOperation","callback","self","promisifyResponse","Promise","resolve","reject","googleError_1","message","code","request","GetOperationRequest","getOperationInternal","noCallbackPromise","then","responses","op","responseDecoder","metadataDecoder","response","value","now","Date","delayMult","retryDelayMultiplier","maxDelay","maxRetryDelayMillis","delay","initialRetryDelayMillis","deadline","Infinity","totalTimeoutMillis","getTime","previousMetadataBytes","emit","args","arrayEquals","a","b","byteLength","i","retry","status_1","DEADLINE_EXCEEDED","setImmediate","err","rawResponse","setTimeout","Math","min","promise","exports","operation"],"sources":["../../../src/longRunningCalls/longrunning.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}