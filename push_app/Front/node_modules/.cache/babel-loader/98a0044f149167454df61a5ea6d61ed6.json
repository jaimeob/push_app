{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.constructSettings = exports.createBundleOptions = exports.createMaxRetriesBackoffSettings = exports.createDefaultBackoffSettings = exports.createBackoffSettings = exports.createRetryOptions = exports.CallSettings = exports.RetryOptions = void 0;\n/**\n * Encapsulates the overridable settings for a particular API call.\n *\n * ``CallOptions`` is an optional arg for all GAX API calls.  It is used to\n * configure the settings of a specific API call.\n *\n * When provided, its values override the GAX service defaults for that\n * particular call.\n *\n * Typically the API clients will accept this as the second to the last\n * argument. See the examples below.\n * @typedef {Object} CallOptions\n * @property {number=} timeout - The client-side timeout for API calls.\n * @property {RetryOptions=} retry - determines whether and how to retry\n *   on transient errors. When set to null, the call will not retry.\n * @property {boolean=} autoPaginate - If set to false and the call is\n *   configured for paged iteration, page unrolling is not performed, instead\n *   the callback will be called with the response object.\n * @property {Object=} pageToken - If set and the call is configured for\n *   paged iteration, paged iteration is not performed and requested with this\n *   pageToken.\n * @property {number} maxResults - If set and the call is configured for\n *   paged iteration, the call will stop when the number of response elements\n *   reaches to the specified size. By default, it will unroll the page to\n *   the end of the list.\n * @property {boolean=} isBundling - If set to false and the call is configured\n *   for bundling, bundling is not performed.\n * @property {BackoffSettings=} longrunning - BackoffSettings used for polling.\n * @example\n * // suppress bundling for bundled method.\n * api.bundlingMethod(\n *     param, {optParam: aValue, isBundling: false}, function(err, response) {\n *   // handle response.\n * });\n * @example\n * // suppress streaming for page-streaming method.\n * api.pageStreamingMethod(\n *     param, {optParam: aValue, autoPaginate: false}, function(err, page) {\n *   // not returning a stream, but callback is called with the paged response.\n * });\n */\n\n/**\n * Per-call configurable settings for retrying upon transient failure.\n * @typedef {Object} RetryOptions\n * @property {String[]} retryCodes\n * @property {BackoffSettings} backoffSettings\n */\n\nclass RetryOptions {\n  constructor(retryCodes, backoffSettings) {\n    this.retryCodes = retryCodes;\n    this.backoffSettings = backoffSettings;\n  }\n\n}\n\nexports.RetryOptions = RetryOptions;\n\nclass CallSettings {\n  /**\n   * @param {Object} settings - An object containing parameters of this settings.\n   * @param {number} settings.timeout - The client-side timeout for API calls.\n   *   This parameter is ignored for retrying calls.\n   * @param {RetryOptions} settings.retry - The configuration for retrying upon\n   *   transient error. If set to null, this call will not retry.\n   * @param {boolean} settings.autoPaginate - If there is no `pageDescriptor`,\n   *   this attrbute has no meaning. Otherwise, determines whether a page\n   * streamed response should make the page structure transparent to the user by\n   *   flattening the repeated field in the returned generator.\n   * @param {number} settings.pageToken - If there is no `pageDescriptor`,\n   *   this attribute has no meaning. Otherwise, determines the page token used\n   * in the page streaming request.\n   * @param {Object} settings.otherArgs - Additional arguments to be passed to\n   *   the API calls.\n   *\n   * @constructor\n   */\n  constructor(settings) {\n    var _a;\n\n    settings = settings || {};\n    this.timeout = settings.timeout || 30 * 1000;\n    this.retry = settings.retry;\n    this.autoPaginate = 'autoPaginate' in settings ? settings.autoPaginate : true;\n    this.pageToken = settings.pageToken;\n    this.maxResults = settings.maxResults;\n    this.otherArgs = settings.otherArgs || {};\n    this.bundleOptions = settings.bundleOptions;\n    this.isBundling = 'isBundling' in settings ? settings.isBundling : true;\n    this.longrunning = 'longrunning' in settings ? settings.longrunning : undefined;\n    this.apiName = (_a = settings.apiName) !== null && _a !== void 0 ? _a : undefined;\n    this.retryRequestOptions = settings.retryRequestOptions;\n  }\n  /**\n   * Returns a new CallSettings merged from this and a CallOptions object.\n   *\n   * @param {CallOptions} options - an instance whose values override\n   *   those in this object. If null, ``merge`` returns a copy of this\n   *   object\n   * @return {CallSettings} The merged CallSettings instance.\n   */\n\n\n  merge(options) {\n    if (!options) {\n      return new CallSettings(this);\n    }\n\n    let timeout = this.timeout;\n    let retry = this.retry;\n    let autoPaginate = this.autoPaginate;\n    let pageToken = this.pageToken;\n    let pageSize = this.pageSize;\n    let maxResults = this.maxResults;\n    let otherArgs = this.otherArgs;\n    let isBundling = this.isBundling;\n    let longrunning = this.longrunning;\n    let apiName = this.apiName;\n    let retryRequestOptions = this.retryRequestOptions; // If a method-specific timeout is set in the service config, and the retry codes for that\n    // method are non-null, then that timeout value will be used to\n    // override backoff settings.\n\n    if (retry !== undefined && retry !== null && retry.retryCodes !== null && retry.retryCodes.length > 0) {\n      retry.backoffSettings.initialRpcTimeoutMillis = timeout;\n      retry.backoffSettings.maxRpcTimeoutMillis = timeout;\n      retry.backoffSettings.totalTimeoutMillis = timeout;\n    } // If the user provides a timeout to the method, that timeout value will be used\n    // to override the backoff settings.\n\n\n    if ('timeout' in options) {\n      timeout = options.timeout;\n\n      if (retry !== undefined && retry !== null && retry.retryCodes.length > 0) {\n        retry.backoffSettings.initialRpcTimeoutMillis = timeout;\n        retry.backoffSettings.maxRpcTimeoutMillis = timeout;\n        retry.backoffSettings.totalTimeoutMillis = timeout;\n      }\n    }\n\n    if ('retry' in options) {\n      retry = mergeRetryOptions(retry || {}, options.retry);\n    }\n\n    if ('autoPaginate' in options && !options.autoPaginate) {\n      autoPaginate = false;\n    }\n\n    if ('pageToken' in options) {\n      autoPaginate = false;\n      pageToken = options.pageToken;\n    }\n\n    if ('pageSize' in options) {\n      pageSize = options.pageSize;\n    }\n\n    if ('maxResults' in options) {\n      maxResults = options.maxResults;\n    }\n\n    if ('otherArgs' in options) {\n      otherArgs = {};\n\n      for (const key in this.otherArgs) {\n        otherArgs[key] = this.otherArgs[key];\n      }\n\n      for (const optionsKey in options.otherArgs) {\n        otherArgs[optionsKey] = options.otherArgs[optionsKey];\n      }\n    }\n\n    if ('isBundling' in options) {\n      isBundling = options.isBundling;\n    }\n\n    if ('maxRetries' in options) {\n      retry.backoffSettings.maxRetries = options.maxRetries;\n      delete retry.backoffSettings.totalTimeoutMillis;\n    }\n\n    if ('longrunning' in options) {\n      longrunning = options.longrunning;\n    }\n\n    if ('apiName' in options) {\n      apiName = options.apiName;\n    }\n\n    if ('retryRequestOptions' in options) {\n      retryRequestOptions = options.retryRequestOptions;\n    }\n\n    return new CallSettings({\n      timeout,\n      retry,\n      bundleOptions: this.bundleOptions,\n      longrunning,\n      autoPaginate,\n      pageToken,\n      pageSize,\n      maxResults,\n      otherArgs,\n      isBundling,\n      apiName,\n      retryRequestOptions\n    });\n  }\n\n}\n\nexports.CallSettings = CallSettings;\n/**\n * Per-call configurable settings for retrying upon transient failure.\n *\n * @param {number[]} retryCodes - a list of Google API canonical error codes\n *   upon which a retry should be attempted.\n * @param {BackoffSettings} backoffSettings - configures the retry\n *   exponential backoff algorithm.\n * @return {RetryOptions} A new RetryOptions object.\n *\n */\n\nfunction createRetryOptions(retryCodes, backoffSettings) {\n  return {\n    retryCodes,\n    backoffSettings\n  };\n}\n\nexports.createRetryOptions = createRetryOptions;\n/**\n * Parameters to the exponential backoff algorithm for retrying.\n *\n * @param {number} initialRetryDelayMillis - the initial delay time,\n *   in milliseconds, between the completion of the first failed request and the\n *   initiation of the first retrying request.\n * @param {number} retryDelayMultiplier - the multiplier by which to\n *   increase the delay time between the completion of failed requests, and the\n *   initiation of the subsequent retrying request.\n * @param {number} maxRetryDelayMillis - the maximum delay time, in\n *   milliseconds, between requests. When this value is reached,\n *   ``retryDelayMultiplier`` will no longer be used to increase delay time.\n * @param {number} initialRpcTimeoutMillis - the initial timeout parameter\n *   to the request.\n * @param {number} rpcTimeoutMultiplier - the multiplier by which to\n *   increase the timeout parameter between failed requests.\n * @param {number} maxRpcTimeoutMillis - the maximum timeout parameter, in\n *   milliseconds, for a request. When this value is reached,\n *   ``rpcTimeoutMultiplier`` will no longer be used to increase the timeout.\n * @param {number} totalTimeoutMillis - the total time, in milliseconds,\n *   starting from when the initial request is sent, after which an error will\n *   be returned, regardless of the retrying attempts made meanwhile.\n * @return {BackoffSettings} a new settings.\n *\n */\n\nfunction createBackoffSettings(initialRetryDelayMillis, retryDelayMultiplier, maxRetryDelayMillis, initialRpcTimeoutMillis, rpcTimeoutMultiplier, maxRpcTimeoutMillis, totalTimeoutMillis) {\n  return {\n    initialRetryDelayMillis,\n    retryDelayMultiplier,\n    maxRetryDelayMillis,\n    initialRpcTimeoutMillis,\n    rpcTimeoutMultiplier,\n    maxRpcTimeoutMillis,\n    totalTimeoutMillis\n  };\n}\n\nexports.createBackoffSettings = createBackoffSettings;\n\nfunction createDefaultBackoffSettings() {\n  return createBackoffSettings(100, 1.3, 60000, null, null, null, null);\n}\n\nexports.createDefaultBackoffSettings = createDefaultBackoffSettings;\n/**\n * Parameters to the exponential backoff algorithm for retrying.\n * This function is unsupported, and intended for internal use only.\n *\n * @param {number} initialRetryDelayMillis - the initial delay time,\n *   in milliseconds, between the completion of the first failed request and the\n *   initiation of the first retrying request.\n * @param {number} retryDelayMultiplier - the multiplier by which to\n *   increase the delay time between the completion of failed requests, and the\n *   initiation of the subsequent retrying request.\n * @param {number} maxRetryDelayMillis - the maximum delay time, in\n *   milliseconds, between requests. When this value is reached,\n *   ``retryDelayMultiplier`` will no longer be used to increase delay time.\n * @param {number} initialRpcTimeoutMillis - the initial timeout parameter\n *   to the request.\n * @param {number} rpcTimeoutMultiplier - the multiplier by which to\n *   increase the timeout parameter between failed requests.\n * @param {number} maxRpcTimeoutMillis - the maximum timeout parameter, in\n *   milliseconds, for a request. When this value is reached,\n *   ``rpcTimeoutMultiplier`` will no longer be used to increase the timeout.\n * @param {number} maxRetries - the maximum number of retrying attempts that\n *   will be made. If reached, an error will be returned.\n * @return {BackoffSettings} a new settings.\n *\n */\n\nfunction createMaxRetriesBackoffSettings(initialRetryDelayMillis, retryDelayMultiplier, maxRetryDelayMillis, initialRpcTimeoutMillis, rpcTimeoutMultiplier, maxRpcTimeoutMillis, maxRetries) {\n  return {\n    initialRetryDelayMillis,\n    retryDelayMultiplier,\n    maxRetryDelayMillis,\n    initialRpcTimeoutMillis,\n    rpcTimeoutMultiplier,\n    maxRpcTimeoutMillis,\n    maxRetries\n  };\n}\n\nexports.createMaxRetriesBackoffSettings = createMaxRetriesBackoffSettings;\n/**\n * Creates a new {@link BundleOptions}.\n *\n * @private\n * @param {Object} options - An object to hold optional parameters. See\n *   properties for the content of options.\n * @return {BundleOptions} - A new options.\n */\n\nfunction createBundleOptions(options) {\n  const params = ['element_count_threshold', 'element_count_limit', 'request_byte_threshold', 'request_byte_limit', 'delay_threshold_millis'];\n  params.forEach(param => {\n    if (param in options && typeof options[param] !== 'number') {\n      throw new Error(`${param} should be a number`);\n    }\n  });\n  const elementCountThreshold = options.element_count_threshold || 0;\n  const elementCountLimit = options.element_count_limit || 0;\n  const requestByteThreshold = options.request_byte_threshold || 0;\n  const requestByteLimit = options.request_byte_limit || 0;\n  const delayThreshold = options.delay_threshold_millis || 0;\n\n  if (elementCountThreshold === 0 && requestByteThreshold === 0 && delayThreshold === 0) {\n    throw new Error('one threshold should be > 0');\n  }\n\n  return {\n    elementCountThreshold,\n    elementCountLimit,\n    requestByteThreshold,\n    requestByteLimit,\n    delayThreshold\n  };\n}\n\nexports.createBundleOptions = createBundleOptions;\n/**\n * Helper for {@link constructSettings}\n *\n * @private\n *\n * @param {Object} methodConfig - A dictionary representing a single\n *   `methods` entry of the standard API client config file. (See\n *   {@link constructSettings} for information on this yaml.)\n * @param {?Object} retryCodes - A dictionary parsed from the\n *   `retry_codes_def` entry of the standard API client config\n *   file. (See {@link constructSettings} for information on this yaml.)\n * @param {Object} retryParams - A dictionary parsed from the\n *   `retry_params` entry of the standard API client config\n *   file. (See {@link constructSettings} for information on this yaml.)\n * @param {Object} retryNames - A dictionary mapping the string names\n *   used in the standard API client config file to API response\n *   status codes.\n * @return {?RetryOptions} The new retry options.\n */\n\nfunction constructRetry(methodConfig, retryCodes, retryParams, retryNames) {\n  if (!methodConfig) {\n    return null;\n  }\n\n  let codes = null;\n\n  if (retryCodes && 'retry_codes_name' in methodConfig) {\n    const retryCodesName = methodConfig['retry_codes_name'];\n    codes = (retryCodes[retryCodesName] || []).map(name => {\n      return Number(retryNames[name]);\n    });\n  }\n\n  let backoffSettings = null;\n\n  if (retryParams && 'retry_params_name' in methodConfig) {\n    const params = retryParams[methodConfig.retry_params_name];\n    backoffSettings = createBackoffSettings(params.initial_retry_delay_millis, params.retry_delay_multiplier, params.max_retry_delay_millis, params.initial_rpc_timeout_millis, params.rpc_timeout_multiplier, params.max_rpc_timeout_millis, params.total_timeout_millis);\n  }\n\n  return createRetryOptions(codes, backoffSettings);\n}\n/**\n * Helper for {@link constructSettings}\n *\n * Takes two retry options, and merges them into a single RetryOption instance.\n *\n * @private\n *\n * @param {RetryOptions} retry - The base RetryOptions.\n * @param {RetryOptions} overrides - The RetryOptions used for overriding\n *   `retry`. Use the values if it is not null. If entire `overrides` is null,\n *   ignore the base retry and return null.\n * @return {?RetryOptions} The merged RetryOptions.\n */\n\n\nfunction mergeRetryOptions(retry, overrides) {\n  if (!overrides) {\n    return null;\n  }\n\n  if (!overrides.retryCodes && !overrides.backoffSettings) {\n    return retry;\n  }\n\n  const codes = overrides.retryCodes ? overrides.retryCodes : retry.retryCodes;\n  const backoffSettings = overrides.backoffSettings ? overrides.backoffSettings : retry.backoffSettings;\n  return createRetryOptions(codes, backoffSettings);\n}\n/**\n * Constructs a dictionary mapping method names to {@link CallSettings}.\n *\n * The `clientConfig` parameter is parsed from a client configuration JSON\n * file of the form:\n *\n *     {\n *       \"interfaces\": {\n *         \"google.fake.v1.ServiceName\": {\n *           \"retry_codes\": {\n *             \"idempotent\": [\"UNAVAILABLE\", \"DEADLINE_EXCEEDED\"],\n *             \"non_idempotent\": []\n *           },\n *           \"retry_params\": {\n *             \"default\": {\n *               \"initial_retry_delay_millis\": 100,\n *               \"retry_delay_multiplier\": 1.2,\n *               \"max_retry_delay_millis\": 1000,\n *               \"initial_rpc_timeout_millis\": 2000,\n *               \"rpc_timeout_multiplier\": 1.5,\n *               \"max_rpc_timeout_millis\": 30000,\n *               \"total_timeout_millis\": 45000\n *             }\n *           },\n *           \"methods\": {\n *             \"CreateFoo\": {\n *               \"retry_codes_name\": \"idempotent\",\n *               \"retry_params_name\": \"default\"\n *             },\n *             \"Publish\": {\n *               \"retry_codes_name\": \"non_idempotent\",\n *               \"retry_params_name\": \"default\",\n *               \"bundling\": {\n *                 \"element_count_threshold\": 40,\n *                 \"element_count_limit\": 200,\n *                 \"request_byte_threshold\": 90000,\n *                 \"request_byte_limit\": 100000,\n *                 \"delay_threshold_millis\": 100\n *               }\n *             }\n *           }\n *         }\n *       }\n *     }\n *\n * @param {String} serviceName - The fully-qualified name of this\n *   service, used as a key into the client config file (in the\n *   example above, this value should be 'google.fake.v1.ServiceName').\n * @param {Object} clientConfig - A dictionary parsed from the\n *   standard API client config file.\n * @param {Object} configOverrides - A dictionary in the same structure of\n *   client_config to override the settings.\n * @param {Object.<string, string[]>} retryNames - A dictionary mapping the strings\n *   referring to response status codes to objects representing\n *   those codes.\n * @param {Object} otherArgs - the non-request arguments to be passed to the API\n *   calls.\n * @return {Object} A mapping from method name to CallSettings, or null if the\n *   service is not found in the config.\n */\n\n\nfunction constructSettings(serviceName, clientConfig, configOverrides, retryNames, otherArgs) {\n  otherArgs = otherArgs || {}; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  const defaults = {};\n  const serviceConfig = (clientConfig.interfaces || {})[serviceName];\n\n  if (!serviceConfig) {\n    return null;\n  } // users can override the config from client side, like bundling options.\n  // The detailed structure of the clientConfig can be found here: https://github.com/googleapis/gax-nodejs/blob/main/src/gax.ts#L546\n  // The way to override bundling options:\n  //\n  // const customConfig = {\"interfaces\": {\"service\": {\"methods\": {\"methodName\": {\"bundling\": {..}}}}}}\n  // const client = new Client({ projectId, customConfig });\n\n\n  const overrides = (configOverrides.interfaces || {})[serviceName] || {};\n  const methods = serviceConfig.methods;\n  const overridingMethods = overrides.methods || {};\n\n  for (const methodName in methods) {\n    const methodConfig = methods[methodName];\n    const jsName = methodName[0].toLowerCase() + methodName.slice(1);\n    let retry = constructRetry(methodConfig, serviceConfig.retry_codes, serviceConfig.retry_params, retryNames);\n    let bundlingConfig = methodConfig.bundling;\n    let timeout = methodConfig.timeout_millis;\n\n    if (methodName in overridingMethods) {\n      const overridingMethod = overridingMethods[methodName];\n\n      if (overridingMethod) {\n        if ('bundling' in overridingMethod) {\n          bundlingConfig = overridingMethod.bundling;\n        }\n\n        if ('timeout_millis' in overridingMethod) {\n          timeout = overridingMethod.timeout_millis;\n        }\n      }\n\n      retry = mergeRetryOptions(retry, constructRetry(overridingMethod, overrides.retry_codes, overrides.retry_params, retryNames));\n    }\n\n    const apiName = serviceName;\n    defaults[jsName] = new CallSettings({\n      timeout,\n      retry,\n      bundleOptions: bundlingConfig ? createBundleOptions(bundlingConfig) : null,\n      otherArgs,\n      apiName\n    });\n  }\n\n  return defaults;\n}\n\nexports.constructSettings = constructSettings;","map":{"version":3,"mappings":"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","names":["RetryOptions","constructor","retryCodes","backoffSettings","exports","CallSettings","settings","timeout","retry","autoPaginate","pageToken","maxResults","otherArgs","bundleOptions","isBundling","longrunning","undefined","apiName","_a","retryRequestOptions","merge","options","pageSize","length","initialRpcTimeoutMillis","maxRpcTimeoutMillis","totalTimeoutMillis","mergeRetryOptions","key","optionsKey","maxRetries","createRetryOptions","createBackoffSettings","initialRetryDelayMillis","retryDelayMultiplier","maxRetryDelayMillis","rpcTimeoutMultiplier","createDefaultBackoffSettings","createMaxRetriesBackoffSettings","createBundleOptions","params","forEach","param","Error","elementCountThreshold","element_count_threshold","elementCountLimit","element_count_limit","requestByteThreshold","request_byte_threshold","requestByteLimit","request_byte_limit","delayThreshold","delay_threshold_millis","constructRetry","methodConfig","retryParams","retryNames","codes","retryCodesName","map","name","Number","retry_params_name","initial_retry_delay_millis","retry_delay_multiplier","max_retry_delay_millis","initial_rpc_timeout_millis","rpc_timeout_multiplier","max_rpc_timeout_millis","total_timeout_millis","overrides","constructSettings","serviceName","clientConfig","configOverrides","defaults","serviceConfig","interfaces","methods","overridingMethods","methodName","jsName","toLowerCase","slice","retry_codes","retry_params","bundlingConfig","bundling","timeout_millis","overridingMethod"],"sources":["../../src/gax.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}