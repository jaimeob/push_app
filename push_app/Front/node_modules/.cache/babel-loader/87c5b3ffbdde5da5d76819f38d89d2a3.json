{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StreamProxy = exports.StreamType = void 0;\n\nconst streamArrayParser_1 = require(\"../streamArrayParser\"); // eslint-disable-next-line @typescript-eslint/no-var-requires\n\n\nconst duplexify = require('duplexify'); // eslint-disable-next-line @typescript-eslint/no-var-requires\n\n\nconst retryRequest = require('retry-request');\n/**\n * The type of gRPC streaming.\n * @enum {number}\n */\n\n\nvar StreamType;\n\n(function (StreamType) {\n  /** Client sends a single request, server streams responses. */\n  StreamType[StreamType[\"SERVER_STREAMING\"] = 1] = \"SERVER_STREAMING\";\n  /** Client streams requests, server returns a single response. */\n\n  StreamType[StreamType[\"CLIENT_STREAMING\"] = 2] = \"CLIENT_STREAMING\";\n  /** Both client and server stream objects. */\n\n  StreamType[StreamType[\"BIDI_STREAMING\"] = 3] = \"BIDI_STREAMING\";\n})(StreamType = exports.StreamType || (exports.StreamType = {}));\n\nclass StreamProxy extends duplexify {\n  /**\n   * StreamProxy is a proxy to gRPC-streaming method.\n   *\n   * @private\n   * @constructor\n   * @param {StreamType} type - the type of gRPC stream.\n   * @param {ApiCallback} callback - the callback for further API call.\n   */\n  constructor(type, callback) {\n    super(undefined, undefined, {\n      objectMode: true,\n      readable: type !== StreamType.CLIENT_STREAMING,\n      writable: type !== StreamType.SERVER_STREAMING\n    });\n    this.type = type;\n    this._callback = callback;\n    this._isCancelCalled = false;\n    this._responseHasSent = false;\n  }\n\n  cancel() {\n    if (this.stream) {\n      this.stream.cancel();\n    } else {\n      this._isCancelCalled = true;\n    }\n  }\n  /**\n   * Forward events from an API request stream to the user's stream.\n   * @param {Stream} stream - The API request stream.\n   */\n\n\n  forwardEvents(stream) {\n    const eventsToForward = ['metadata', 'response', 'status'];\n\n    if (stream instanceof streamArrayParser_1.StreamArrayParser) {\n      eventsToForward.push('data', 'end', 'error');\n    }\n\n    eventsToForward.forEach(event => {\n      stream.on(event, this.emit.bind(this, event));\n    }); // gRPC is guaranteed emit the 'status' event but not 'metadata', and 'status' is the last event to emit.\n    // Emit the 'response' event if stream has no 'metadata' event.\n    // This avoids the stream swallowing the other events, such as 'end'.\n\n    stream.on('status', () => {\n      if (!this._responseHasSent) {\n        stream.emit('response', {\n          code: 200,\n          details: '',\n          message: 'OK'\n        });\n      }\n    }); // We also want to supply the status data as 'response' event to support\n    // the behavior of google-cloud-node expects.\n    // see:\n    // https://github.com/GoogleCloudPlatform/google-cloud-node/pull/1775#issuecomment-259141029\n    // https://github.com/GoogleCloudPlatform/google-cloud-node/blob/116436fa789d8b0f7fc5100b19b424e3ec63e6bf/packages/common/src/grpc-service.js#L355\n\n    stream.on('metadata', metadata => {\n      // Create a response object with succeeds.\n      // TODO: unify this logic with the decoration of gRPC response when it's\n      // added. see: https://github.com/googleapis/gax-nodejs/issues/65\n      stream.emit('response', {\n        code: 200,\n        details: '',\n        message: 'OK',\n        metadata\n      });\n      this._responseHasSent = true;\n    });\n  }\n  /**\n   * Specifies the target stream.\n   * @param {ApiCall} apiCall - the API function to be called.\n   * @param {Object} argument - the argument to be passed to the apiCall.\n   */\n\n\n  setStream(apiCall, argument) {\n    let retryRequestOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (this.type === StreamType.SERVER_STREAMING) {\n      const retryStream = retryRequest(null, {\n        objectMode: true,\n        request: () => {\n          if (this._isCancelCalled) {\n            if (this.stream) {\n              this.stream.cancel();\n            }\n\n            return;\n          }\n\n          const stream = apiCall(argument, this._callback);\n          this.stream = stream;\n          this.forwardEvents(stream);\n          return stream;\n        },\n        retries: retryRequestOptions.retries,\n        currentRetryAttempt: retryRequestOptions.currentRetryAttempt,\n        noResponseRetries: retryRequestOptions.noResponseRetries,\n        shouldRetryFn: retryRequestOptions.shouldRetryFn\n      });\n      this.setReadable(retryStream);\n      return;\n    }\n\n    const stream = apiCall(argument, this._callback);\n    this.stream = stream;\n    this.forwardEvents(stream);\n\n    if (this.type === StreamType.CLIENT_STREAMING) {\n      this.setWritable(stream);\n    }\n\n    if (this.type === StreamType.BIDI_STREAMING) {\n      this.setReadable(stream);\n      this.setWritable(stream);\n    }\n\n    if (this._isCancelCalled && this.stream) {\n      this.stream.cancel();\n    }\n  }\n\n}\n\nexports.StreamProxy = StreamProxy;","map":{"version":3,"mappings":"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","names":["duplexify","require","retryRequest","StreamType","exports","StreamProxy","constructor","type","callback","undefined","objectMode","readable","CLIENT_STREAMING","writable","SERVER_STREAMING","_callback","_isCancelCalled","_responseHasSent","cancel","stream","forwardEvents","eventsToForward","streamArrayParser_1","push","forEach","event","on","emit","bind","code","details","message","metadata","setStream","apiCall","argument","retryRequestOptions","retryStream","request","retries","currentRetryAttempt","noResponseRetries","shouldRetryFn","setReadable","setWritable","BIDI_STREAMING"],"sources":["../../../src/streamingCalls/streaming.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}