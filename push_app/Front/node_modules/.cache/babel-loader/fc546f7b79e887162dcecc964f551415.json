{"ast":null,"code":"\"use strict\"; // Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.googleProtobufValueFromProto3JSON = exports.googleProtobufListValueFromProto3JSON = exports.googleProtobufStructFromProto3JSON = exports.googleProtobufValueToProto3JSON = exports.googleProtobufListValueToProto3JSON = exports.googleProtobufStructToProto3JSON = void 0;\n\nconst assert = require(\"assert\");\n\nfunction googleProtobufStructToProto3JSON(obj) {\n  const result = {};\n  const fields = obj.fields;\n\n  for (const [key, value] of Object.entries(fields)) {\n    result[key] = googleProtobufValueToProto3JSON(value);\n  }\n\n  return result;\n}\n\nexports.googleProtobufStructToProto3JSON = googleProtobufStructToProto3JSON;\n\nfunction googleProtobufListValueToProto3JSON(obj) {\n  assert(Array.isArray(obj.values), 'ListValue internal representation must contain array of values');\n  return obj.values.map(googleProtobufValueToProto3JSON);\n}\n\nexports.googleProtobufListValueToProto3JSON = googleProtobufListValueToProto3JSON;\n\nfunction googleProtobufValueToProto3JSON(obj) {\n  if (Object.prototype.hasOwnProperty.call(obj, 'nullValue')) {\n    return null;\n  }\n\n  if (Object.prototype.hasOwnProperty.call(obj, 'numberValue') && typeof obj.numberValue === 'number') {\n    if (!Number.isFinite(obj.numberValue)) {\n      return obj.numberValue.toString();\n    }\n\n    return obj.numberValue;\n  }\n\n  if (Object.prototype.hasOwnProperty.call(obj, 'stringValue') && typeof obj.stringValue === 'string') {\n    return obj.stringValue;\n  }\n\n  if (Object.prototype.hasOwnProperty.call(obj, 'boolValue') && typeof obj.boolValue === 'boolean') {\n    return obj.boolValue;\n  }\n\n  if (Object.prototype.hasOwnProperty.call(obj, 'structValue') && typeof obj.structValue === 'object') {\n    return googleProtobufStructToProto3JSON(obj.structValue);\n  }\n\n  if (Object.prototype.hasOwnProperty.call(obj, 'listValue') && typeof obj === 'object' && typeof obj.listValue === 'object') {\n    return googleProtobufListValueToProto3JSON(obj.listValue);\n  } // Assuming empty Value to be null\n\n\n  return null;\n}\n\nexports.googleProtobufValueToProto3JSON = googleProtobufValueToProto3JSON;\n\nfunction googleProtobufStructFromProto3JSON(json) {\n  const fields = {};\n\n  for (const [key, value] of Object.entries(json)) {\n    fields[key] = googleProtobufValueFromProto3JSON(value);\n  }\n\n  return {\n    fields\n  };\n}\n\nexports.googleProtobufStructFromProto3JSON = googleProtobufStructFromProto3JSON;\n\nfunction googleProtobufListValueFromProto3JSON(json) {\n  return {\n    values: json.map(element => googleProtobufValueFromProto3JSON(element))\n  };\n}\n\nexports.googleProtobufListValueFromProto3JSON = googleProtobufListValueFromProto3JSON;\n\nfunction googleProtobufValueFromProto3JSON(json) {\n  if (json === null) {\n    return {\n      nullValue: 'NULL_VALUE'\n    };\n  }\n\n  if (typeof json === 'number') {\n    return {\n      numberValue: json\n    };\n  }\n\n  if (typeof json === 'string') {\n    return {\n      stringValue: json\n    };\n  }\n\n  if (typeof json === 'boolean') {\n    return {\n      boolValue: json\n    };\n  }\n\n  if (Array.isArray(json)) {\n    return {\n      listValue: googleProtobufListValueFromProto3JSON(json)\n    };\n  }\n\n  if (typeof json === 'object') {\n    return {\n      structValue: googleProtobufStructFromProto3JSON(json)\n    };\n  }\n\n  throw new Error(`googleProtobufValueFromProto3JSON: incorrect parameter type: ${typeof json}`);\n}\n\nexports.googleProtobufValueFromProto3JSON = googleProtobufValueFromProto3JSON;","map":{"version":3,"mappings":"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","names":["googleProtobufStructToProto3JSON","obj","result","fields","key","value","Object","entries","googleProtobufValueToProto3JSON","exports","googleProtobufListValueToProto3JSON","assert","Array","isArray","values","map","prototype","hasOwnProperty","call","numberValue","Number","isFinite","toString","stringValue","boolValue","structValue","listValue","googleProtobufStructFromProto3JSON","json","googleProtobufValueFromProto3JSON","googleProtobufListValueFromProto3JSON","element","nullValue","Error"],"sources":["../../typescript/src/value.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}