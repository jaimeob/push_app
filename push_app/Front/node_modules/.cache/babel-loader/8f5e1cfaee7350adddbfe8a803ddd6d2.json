{"ast":null,"code":"\"use strict\"; // Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LocationsClient = void 0;\n/* global window */\n\nconst gax = require(\"./gax\");\n\nconst warnings_1 = require(\"./warnings\");\n\nconst grpc_1 = require(\"./grpc\");\n\nconst createApiCall_1 = require(\"./createApiCall\");\n\nconst routingHeader = require(\"./routingHeader\");\n\nconst pageDescriptor_1 = require(\"./paginationCalls/pageDescriptor\");\n\nconst jsonProtos = require(\"../protos/locations.json\");\n/**\n * This file defines retry strategy and timeouts for all API methods in this library.\n */\n\n\nconst gapicConfig = require(\"./locations_client_config.json\");\n\nconst version = require('../../package.json').version;\n/**\n *  Google Cloud Locations Client.\n *  This is manually written for providing methods [listLocations, getLocations] to the generated client.\n */\n\n\nclass LocationsClient {\n  /**\n   * Construct an instance of LocationsClient.\n   *\n   * @param {object} [options] - The configuration object.\n   * The options accepted by the constructor are described in detail\n   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).\n   * The common options are:\n   * @param {object} [options.credentials] - Credentials object.\n   * @param {string} [options.credentials.client_email]\n   * @param {string} [options.credentials.private_key]\n   * @param {string} [options.email] - Account email address. Required when\n   *     using a .pem or .p12 keyFilename.\n   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n   *     .p12 key downloaded from the Google Developers Console. If you provide\n   *     a path to a JSON file, the projectId option below is not necessary.\n   *     NOTE: .pem and .p12 require you to specify options.email as well.\n   * @param {number} [options.port] - The port on which to connect to\n   *     the remote host.\n   * @param {string} [options.projectId] - The project ID from the Google\n   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n   *     the environment variable GCLOUD_PROJECT for your project ID. If your\n   *     app is running in an environment which supports\n   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n   *     your project ID will be detected automatically.\n   * @param {string} [options.apiEndpoint] - The domain name of the\n   *     API remote host.\n   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\n   *     Follows the structure of {@link gapicConfig}.\n   * @param {boolean} [options.fallback] - Use HTTP fallback mode.\n   *     In fallback mode, a special browser-compatible transport implementation is used\n   *     instead of gRPC transport. In browser context (if the `window` object is defined)\n   *     the fallback mode is enabled automatically; set `options.fallback` to `false`\n   *     if you need to override this behavior.\n   */\n  constructor(gaxGrpc, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  opts) {\n    var _a, _b;\n\n    this._terminated = false;\n    this.descriptors = {\n      page: {},\n      stream: {},\n      longrunning: {},\n      batching: {}\n    }; // Ensure that options include all the required fields.\n\n    this.gaxGrpc = gaxGrpc;\n    const staticMembers = this.constructor;\n    const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;\n    this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));\n    const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;\n    const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};\n    const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function';\n    opts = Object.assign({\n      servicePath,\n      port,\n      clientConfig,\n      fallback\n    }, opts); // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\n\n    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {\n      opts['scopes'] = staticMembers.scopes;\n    } // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.\n\n\n    this._gaxGrpc = new grpc_1.GrpcClient(opts); // Save options to use in initialize() method.\n\n    this._opts = opts; // Save the auth object to the client, for use by other methods.\n\n    this.auth = this._gaxGrpc.auth; // Set the default scopes in auth client if needed.\n\n    if (servicePath === staticMembers.servicePath) {\n      this.auth.defaultScopes = staticMembers.scopes;\n    } // Determine the client header string.\n\n\n    const clientHeader = [`gax/${version}`, `gapic/${version}`];\n\n    if (typeof process !== 'undefined' && 'versions' in process) {\n      clientHeader.push(`gl-node/${process.versions.node}`);\n    } else {\n      clientHeader.push(`gl-web/${version}`);\n    }\n\n    if (!opts.fallback) {\n      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\n    } else if (opts.fallback === 'rest') {\n      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);\n    }\n\n    if (opts.libName && opts.libVersion) {\n      clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n    } // Load the applicable protos.\n\n\n    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos); // Some of the methods on this service return \"paged\" results,\n    // (e.g. 50 results at a time, with tokens to get subsequent\n    // pages). Denote the keys used for pagination and results.\n\n    this.descriptors.page = {\n      listLocations: new pageDescriptor_1.PageDescriptor('pageToken', 'nextPageToken', 'locations')\n    }; // Put together the default options sent with requests.\n\n    this._defaults = this._gaxGrpc.constructSettings('google.cloud.location.Locations', gapicConfig, opts.clientConfig || {}, {\n      'x-goog-api-client': clientHeader.join(' ')\n    }); // Set up a dictionary of \"inner API calls\"; the core implementation\n    // of calling the API is handled in `google-gax`, with this code\n    // merely providing the destination and request information.\n\n    this.innerApiCalls = {}; // Add a warn function to the client constructor so it can be easily tested.\n\n    this.warn = warnings_1.warn;\n  }\n  /**\n   * Initialize the client.\n   * Performs asynchronous operations (such as authentication) and prepares the client.\n   * This function will be called automatically when any class method is called for the\n   * first time, but if you need to initialize it before calling an actual method,\n   * feel free to call initialize() directly.\n   *\n   * You can await on this method if you want to make sure the client is initialized.\n   *\n   * @returns {Promise} A promise that resolves to an authenticated service stub.\n   */\n\n\n  initialize() {\n    var _this = this;\n\n    // If the client stub promise is already initialized, return immediately.\n    if (this.locationsStub) {\n      return this.locationsStub;\n    } // Put together the \"service stub\" for\n    // google.cloud.location.Locations.\n\n\n    this.locationsStub = this.gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService('google.cloud.location.Locations') : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this._protos.google.cloud.location.Locations, this._opts, this._providedCustomServicePath); // Iterate over each of the methods that the service provides\n    // and create an API call method for each.\n\n    const locationsStubMethods = ['listLocations', 'getLocation'];\n\n    for (const methodName of locationsStubMethods) {\n      const callPromise = this.locationsStub.then(stub => function () {\n        if (_this._terminated) {\n          return Promise.reject('The client has already been closed.');\n        }\n\n        const func = stub[methodName];\n\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return func.apply(stub, args);\n      }, err => () => {\n        throw err;\n      });\n      const descriptor = this.descriptors.page[methodName] || undefined;\n      const apiCall = createApiCall_1.createApiCall(callPromise, this._defaults[methodName], descriptor);\n      this.innerApiCalls[methodName] = apiCall;\n    }\n\n    return this.locationsStub;\n  }\n  /**\n   * The DNS address for this API service.\n   * @returns {string} The DNS address for this service.\n   */\n\n\n  static get servicePath() {\n    return 'cloud.googleapis.com';\n  }\n  /**\n   * The DNS address for this API service - same as servicePath(),\n   * exists for compatibility reasons.\n   * @returns {string} The DNS address for this service.\n   */\n\n\n  static get apiEndpoint() {\n    return 'cloud.googleapis.com';\n  }\n  /**\n   * The port for this API service.\n   * @returns {number} The default port for this service.\n   */\n\n\n  static get port() {\n    return 443;\n  }\n  /**\n   * The scopes needed to make gRPC calls for every method defined\n   * in this service.\n   * @returns {string[]} List of default scopes.\n   */\n\n\n  static get scopes() {\n    return ['https://www.googleapis.com/auth/cloud-platform'];\n  }\n\n  getProjectId(callback) {\n    if (callback) {\n      this.auth.getProjectId(callback);\n      return;\n    }\n\n    return this.auth.getProjectId();\n  }\n  /**\n   * Gets information about a location.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Resource name for the location.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Location]{@link google.cloud.location.Location}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.getLocation(request);\n   */\n\n\n  getLocation(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = routingHeader.fromParams({\n      name: request.name || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.getLocation(request, options, callback);\n  }\n  /**\n   * Lists information about the supported locations for this service.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   The resource that owns the locations collection, if applicable.\n   * @param {string} request.filter\n   *   The standard list filter.\n   * @param {number} request.pageSize\n   *   The standard list page size.\n   * @param {string} request.pageToken\n   *   The standard list page token.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is Array of [Location]{@link google.cloud.location.Location}.\n   *   The client library will perform auto-pagination by default: it will call the API as many\n   *   times as needed and will merge results from all the pages into this array.\n   *   Note that it can affect your quota.\n   *   We recommend using `listLocationsAsync()`\n   *   method described below for async iteration which you can stop as needed.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   */\n\n\n  listLocations(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = routingHeader.fromParams({\n      name: request.name || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.listLocations(request, options, callback);\n  }\n  /**\n   * Equivalent to `listLocations`, but returns an iterable object.\n   *\n   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   The resource that owns the locations collection, if applicable.\n   * @param {string} request.filter\n   *   The standard list filter.\n   * @param {number} request.pageSize\n   *   The standard list page size.\n   * @param {string} request.pageToken\n   *   The standard list page token.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Object}\n   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\n   *   When you iterate the returned iterable, each element will be an object representing\n   *   [Location]{@link google.cloud.location.Location}. The API will be called under the hood as needed, once per the page,\n   *   so you can stop the iteration when you don't need more results.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   * @example\n   * const iterable = client.listLocationsAsync(request);\n   * for await (const response of iterable) {\n   *   // process response\n   * }\n   */\n\n\n  listLocationsAsync(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = routingHeader.fromParams({\n      name: request.name || ''\n    });\n    options = options || {};\n    const callSettings = new gax.CallSettings(options);\n    this.initialize();\n    return this.descriptors.page.listLocations.asyncIterate(this.innerApiCalls['listLocations'], request, callSettings);\n  }\n  /**\n   * Terminate the gRPC channel and close the client.\n   *\n   * The client will no longer be usable and all future behavior is undefined.\n   * @returns {Promise} A promise that resolves when the client is closed.\n   */\n\n\n  close() {\n    this.initialize();\n\n    if (!this._terminated) {\n      return this.locationsStub.then(stub => {\n        this._terminated = true;\n        stub.close();\n      });\n    }\n\n    return Promise.resolve();\n  }\n\n}\n\nexports.LocationsClient = LocationsClient;","map":{"version":3,"mappings":"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","names":["version","require","LocationsClient","constructor","gaxGrpc","opts","page","stream","longrunning","batching","staticMembers","servicePath","apiEndpoint","_providedCustomServicePath","port","clientConfig","_a","fallback","_b","window","fetch","Object","assign","scopes","_gaxGrpc","grpc_1","_opts","auth","defaultScopes","clientHeader","process","push","versions","node","grpcVersion","libName","libVersion","_protos","loadProtoJSON","jsonProtos","descriptors","listLocations","pageDescriptor_1","_defaults","constructSettings","gapicConfig","join","innerApiCalls","warn","warnings_1","initialize","locationsStub","createStub","lookupService","google","cloud","location","Locations","locationsStubMethods","methodName","callPromise","then","stub","_terminated","Promise","reject","func","args","apply","err","descriptor","undefined","apiCall","createApiCall_1","getProjectId","callback","getLocation","request","optionsOrCallback","options","otherArgs","headers","routingHeader","fromParams","name","listLocationsAsync","callSettings","gax","CallSettings","asyncIterate","close","resolve","exports"],"sources":["../../src/locationService.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}