{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LongrunningApiCaller = void 0;\n\nconst call_1 = require(\"../call\");\n\nconst gax_1 = require(\"../gax\");\n\nconst longrunning_1 = require(\"./longrunning\");\n\nclass LongrunningApiCaller {\n  /**\n   * Creates an API caller that performs polling on a long running operation.\n   *\n   * @private\n   * @constructor\n   * @param {LongRunningDescriptor} longrunningDescriptor - Holds the\n   * decoders used for unpacking responses and the operationsClient\n   * used for polling the operation.\n   */\n  constructor(longrunningDescriptor) {\n    this.longrunningDescriptor = longrunningDescriptor;\n  }\n\n  init(callback) {\n    if (callback) {\n      return new call_1.OngoingCall(callback);\n    }\n\n    return new call_1.OngoingCallPromise();\n  }\n\n  wrap(func) {\n    return func;\n  }\n\n  call(apiCall, argument, settings, canceller) {\n    canceller.call((argument, callback) => {\n      return this._wrapOperation(apiCall, settings, argument, callback);\n    }, argument);\n  }\n\n  _wrapOperation(apiCall, settings, argument, callback) {\n    let backoffSettings = settings.longrunning;\n\n    if (!backoffSettings) {\n      backoffSettings = gax_1.createDefaultBackoffSettings();\n    }\n\n    const longrunningDescriptor = this.longrunningDescriptor;\n    return apiCall(argument, (err, rawResponse) => {\n      if (err) {\n        callback(err, null, null, rawResponse);\n        return;\n      }\n\n      const operation = new longrunning_1.Operation(rawResponse, longrunningDescriptor, backoffSettings, settings);\n      callback(null, operation, rawResponse);\n    });\n  }\n\n  fail(canceller, err) {\n    canceller.callback(err);\n  }\n\n  result(canceller) {\n    return canceller.promise;\n  }\n\n}\n\nexports.LongrunningApiCaller = LongrunningApiCaller;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;AAkBA;;AACA;;AAOA;;AAIA,MAAaA,oBAAb,CAAiC;AAE/B;;;;;;;;;AASAC,cAAYC,qBAAZ,EAAwD;AACtD,SAAKA,qBAAL,GAA6BA,qBAA7B;AACD;;AAEDC,MAAI,CAACC,QAAD,EAAuB;AACzB,QAAIA,QAAJ,EAAc;AACZ,aAAO,IAAIC,kBAAJ,CAAgBD,QAAhB,CAAP;AACD;;AACD,WAAO,IAAIC,yBAAJ,EAAP;AACD;;AAEDC,MAAI,CAACC,IAAD,EAAe;AACjB,WAAOA,IAAP;AACD;;AAEDC,MAAI,CACFC,OADE,EAEFC,QAFE,EAGFC,QAHE,EAIFC,SAJE,EAI2B;AAE7BA,aAAS,CAACJ,IAAV,CAAe,CAACE,QAAD,EAAWN,QAAX,KAAuB;AACpC,aAAO,KAAKS,cAAL,CAAoBJ,OAApB,EAA6BE,QAA7B,EAAuCD,QAAvC,EAAiDN,QAAjD,CAAP;AACD,KAFD,EAEGM,QAFH;AAGD;;AAEOG,gBAAc,CACpBJ,OADoB,EAEpBE,QAFoB,EAGpBD,QAHoB,EAIpBN,QAJoB,EAIC;AAErB,QAAIU,eAAe,GAAgCH,QAAQ,CAACI,WAA5D;;AACA,QAAI,CAACD,eAAL,EAAsB;AACpBA,qBAAe,GAAGE,oCAAlB;AACD;;AAED,UAAMd,qBAAqB,GAAG,KAAKA,qBAAnC;AACA,WAAOO,OAAO,CACZC,QADY,EAEZ,CAACO,GAAD,EAA0BC,WAA1B,KAAgE;AAC9D,UAAID,GAAJ,EAAS;AACPb,gBAAQ,CAACa,GAAD,EAAM,IAAN,EAAY,IAAZ,EAAkBC,WAAlB,CAAR;AACA;AACD;;AAED,YAAMC,SAAS,GAAG,IAAIC,uBAAJ,CAChBF,WADgB,EAEhBhB,qBAFgB,EAGhBY,eAHgB,EAIhBH,QAJgB,CAAlB;AAOAP,cAAQ,CAAC,IAAD,EAAOe,SAAP,EAAkBD,WAAlB,CAAR;AACD,KAhBW,CAAd;AAkBD;;AAEDG,MAAI,CAACT,SAAD,EAAgCK,GAAhC,EAAgD;AAClDL,aAAS,CAACR,QAAV,CAAoBa,GAApB;AACD;;AAEDK,QAAM,CAACV,SAAD,EAA8B;AAClC,WAAOA,SAAS,CAACW,OAAjB;AACD;;AA3E8B;;AAAjCC","names":["LongrunningApiCaller","constructor","longrunningDescriptor","init","callback","call_1","wrap","func","call","apiCall","argument","settings","canceller","_wrapOperation","backoffSettings","longrunning","gax_1","err","rawResponse","operation","longrunning_1","fail","result","promise","exports"],"sources":["../../../src/longRunningCalls/longRunningApiCaller.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}