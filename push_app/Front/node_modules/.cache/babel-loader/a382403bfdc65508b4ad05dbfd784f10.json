{"ast":null,"code":"\"use strict\"; // Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.googleProtobufTimestampFromProto3JSON = exports.googleProtobufTimestampToProto3JSON = void 0;\n\nfunction googleProtobufTimestampToProto3JSON(obj) {\n  var _a; // seconds is an instance of Long so it won't be undefined\n\n\n  const durationSeconds = obj.seconds;\n  const date = new Date(durationSeconds * 1000).toISOString(); // Pad leading zeros if nano string length is less than 9.\n\n  let nanos = (_a = obj.nanos) === null || _a === void 0 ? void 0 : _a.toString().padStart(9, '0'); // Trim the unsignificant zeros and keep 3, 6, or 9 decimal digits.\n\n  while (nanos && nanos.length > 3 && nanos.endsWith('000')) {\n    nanos = nanos.slice(0, -3);\n  }\n\n  return date.replace(/(?:\\.\\d{0,9})/, '.' + nanos);\n}\n\nexports.googleProtobufTimestampToProto3JSON = googleProtobufTimestampToProto3JSON;\n\nfunction googleProtobufTimestampFromProto3JSON(json) {\n  const match = json.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?/);\n\n  if (!match) {\n    throw new Error(`googleProtobufDurationFromProto3JSON: incorrect value ${json} passed as google.protobuf.Duration`);\n  }\n\n  const date = new Date(json);\n  const millisecondsSinceEpoch = date.getTime();\n  const seconds = Math.floor(millisecondsSinceEpoch / 1000); // The fractional seconds in the JSON timestamps can go up to 9 digits (i.e. up to 1 nanosecond resolution).\n  // However, Javascript Date object represent any date and time to millisecond precision.\n  // To keep the precision, we extract the fractional seconds and append 0 until the length is equal to 9.\n\n  let nanos = 0;\n  const secondsFromDate = json.split('.')[1];\n\n  if (secondsFromDate) {\n    nanos = parseInt(secondsFromDate.slice(0, -1).padEnd(9, '0'));\n  }\n\n  const result = {};\n\n  if (seconds !== 0) {\n    result.seconds = seconds;\n  }\n\n  if (nanos !== 0) {\n    result.nanos = nanos;\n  }\n\n  return result;\n}\n\nexports.googleProtobufTimestampFromProto3JSON = googleProtobufTimestampFromProto3JSON;","map":{"version":3,"mappings":"cAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAUA,SAAgBA,mCAAhB,CACEC,GADF,EACmC;SAAA,CAEjC;;;AACA,QAAMC,eAAe,GAAGD,GAAG,CAACE,OAA5B;AACA,QAAMC,IAAI,GAAG,IAAIC,IAAJ,CAASH,eAAe,GAAG,IAA3B,EAAiCI,WAAjC,EAAb,CAJiC,CAKjC;;AACA,MAAIC,KAAK,GAAG,SAAG,CAACA,KAAJ,MAAS,IAAT,IAASC,aAAT,GAAS,MAAT,GAASA,GAAEC,QAAF,GAAaC,QAAb,CAAsB,CAAtB,EAAyB,GAAzB,CAArB,CANiC,CAOjC;;AACA,SAAOH,KAAK,IAAIA,KAAK,CAACI,MAAN,GAAe,CAAxB,IAA6BJ,KAAK,CAACK,QAAN,CAAe,KAAf,CAApC,EAA2D;AACzDL,SAAK,GAAGA,KAAK,CAACM,KAAN,CAAY,CAAZ,EAAe,CAAC,CAAhB,CAAR;AACD;;AACD,SAAOT,IAAI,CAACU,OAAL,CAAa,eAAb,EAA8B,MAAMP,KAApC,CAAP;AACD;;AAbDQ;;AAeA,SAAgBC,qCAAhB,CAAsDC,IAAtD,EAAkE;AAChE,QAAMC,KAAK,GAAGD,IAAI,CAACC,KAAL,CAAW,gDAAX,CAAd;;AACA,MAAI,CAACA,KAAL,EAAY;AACV,UAAM,IAAIC,KAAJ,CACJ,yDAAyDF,IAAI,qCADzD,CAAN;AAGD;;AACD,QAAMb,IAAI,GAAG,IAAIC,IAAJ,CAASY,IAAT,CAAb;AACA,QAAMG,sBAAsB,GAAGhB,IAAI,CAACiB,OAAL,EAA/B;AACA,QAAMlB,OAAO,GAAGmB,IAAI,CAACC,KAAL,CAAWH,sBAAsB,GAAG,IAApC,CAAhB,CATgE,CAUhE;AACA;AACA;;AACA,MAAIb,KAAK,GAAG,CAAZ;AACA,QAAMiB,eAAe,GAAGP,IAAI,CAACQ,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAxB;;AACA,MAAID,eAAJ,EAAqB;AACnBjB,SAAK,GAAGmB,QAAQ,CAACF,eAAe,CAACX,KAAhB,CAAsB,CAAtB,EAAyB,CAAC,CAA1B,EAA6Bc,MAA7B,CAAoC,CAApC,EAAuC,GAAvC,CAAD,CAAhB;AACD;;AACD,QAAMC,MAAM,GAAoB,EAAhC;;AACA,MAAIzB,OAAO,KAAK,CAAhB,EAAmB;AACjByB,UAAM,CAACzB,OAAP,GAAiBA,OAAjB;AACD;;AACD,MAAII,KAAK,KAAK,CAAd,EAAiB;AACfqB,UAAM,CAACrB,KAAP,GAAeA,KAAf;AACD;;AACD,SAAOqB,MAAP;AACD;;AA1BDb","names":["googleProtobufTimestampToProto3JSON","obj","durationSeconds","seconds","date","Date","toISOString","nanos","_a","toString","padStart","length","endsWith","slice","replace","exports","googleProtobufTimestampFromProto3JSON","json","match","Error","millisecondsSinceEpoch","getTime","Math","floor","secondsFromDate","split","parseInt","padEnd","result"],"sources":["../../typescript/src/timestamp.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}