{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GoogleErrorDecoder = exports.GoogleError = void 0;\n\nconst status_1 = require(\"./status\");\n\nconst protobuf = require(\"protobufjs\");\n\nclass GoogleError extends Error {\n  // Parse details field in google.rpc.status wire over gRPC medatadata.\n  // Promote google.rpc.ErrorInfo if exist.\n  static parseGRPCStatusDetails(err) {\n    const decoder = new GoogleErrorDecoder();\n\n    try {\n      if (err.metadata && err.metadata.get('grpc-status-details-bin')) {\n        const statusDetailsObj = decoder.decodeGRPCStatusDetails(err.metadata.get('grpc-status-details-bin'));\n\n        if (statusDetailsObj && statusDetailsObj.details && statusDetailsObj.details.length > 0) {\n          err.statusDetails = statusDetailsObj.details;\n        }\n\n        if (statusDetailsObj && statusDetailsObj.errorInfo) {\n          err.reason = statusDetailsObj.errorInfo.reason;\n          err.domain = statusDetailsObj.errorInfo.domain;\n          err.errorInfoMetadata = statusDetailsObj.errorInfo.metadata;\n        }\n      }\n    } catch (decodeErr) {// ignoring the error\n    }\n\n    return err;\n  } // Parse http JSON error and promote google.rpc.ErrorInfo if exist.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  static parseHttpError(json) {\n    const error = Object.assign(new GoogleError(json['error']['message']), json.error); // Map Http Status Code to gRPC Status Code\n\n    if (json['error']['code']) {\n      error.code = status_1.rpcCodeFromHttpStatusCode(json['error']['code']);\n    } // Keep consistency with gRPC statusDetails fields. gRPC details has been occupied before.\n    // Rename \"detials\" to \"statusDetails\".\n\n\n    error.statusDetails = json['error']['details'];\n    delete error.details; // Promote the ErrorInfo fields as error's top-level.\n\n    const errorInfo = !json['error']['details'] ? undefined : json['error']['details'].find(item => item['@type'] === 'type.googleapis.com/google.rpc.ErrorInfo');\n\n    if (errorInfo) {\n      error.reason = errorInfo.reason;\n      error.domain = errorInfo.domain; // error.metadata has been occupied for gRPC metadata, so we use\n      // errorInfoMetadat to represent ErrorInfo' metadata field. Keep\n      // consistency with gRPC ErrorInfo metadata field name.\n\n      error.errorInfoMetadata = errorInfo.metadata;\n    }\n\n    return error;\n  }\n\n}\n\nexports.GoogleError = GoogleError;\n\nclass GoogleErrorDecoder {\n  constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const errorProtoJson = require('../../protos/status.json');\n\n    this.root = protobuf.Root.fromJSON(errorProtoJson);\n    this.anyType = this.root.lookupType('google.protobuf.Any');\n    this.statusType = this.root.lookupType('google.rpc.Status');\n  }\n\n  decodeProtobufAny(anyValue) {\n    const match = anyValue.type_url.match(/^type.googleapis.com\\/(.*)/);\n\n    if (!match) {\n      throw new Error(`Unknown type encoded in google.protobuf.any: ${anyValue.type_url}`);\n    }\n\n    const typeName = match[1];\n    const type = this.root.lookupType(typeName);\n\n    if (!type) {\n      throw new Error(`Cannot lookup type ${typeName}`);\n    }\n\n    return type.decode(anyValue.value);\n  } // Decodes gRPC-fallback error which is an instance of google.rpc.Status.\n\n\n  decodeRpcStatus(buffer) {\n    const uint8array = new Uint8Array(buffer);\n    const status = this.statusType.decode(uint8array); // google.rpc.Status contains an array of google.protobuf.Any\n    // which need a special treatment\n\n    const details = [];\n    let errorInfo;\n\n    for (const detail of status.details) {\n      try {\n        const decodedDetail = this.decodeProtobufAny(detail);\n        details.push(decodedDetail);\n\n        if (detail.type_url === 'type.googleapis.com/google.rpc.ErrorInfo') {\n          errorInfo = decodedDetail;\n        }\n      } catch (err) {// cannot decode detail, likely because of the unknown type - just skip it\n      }\n    }\n\n    const result = {\n      code: status.code,\n      message: status.message,\n      statusDetails: details,\n      reason: errorInfo === null || errorInfo === void 0 ? void 0 : errorInfo.reason,\n      domain: errorInfo === null || errorInfo === void 0 ? void 0 : errorInfo.domain,\n      errorInfoMetadata: errorInfo === null || errorInfo === void 0 ? void 0 : errorInfo.metadata\n    };\n    return result;\n  } // Construct an Error from a StatusObject.\n  // Adapted from https://github.com/grpc/grpc-node/blob/main/packages/grpc-js/src/call.ts#L79\n\n\n  callErrorFromStatus(status) {\n    status.message = `${status.code} ${status_1.Status[status.code]}: ${status.message}`;\n    return Object.assign(new GoogleError(status.message), status);\n  } // Decodes gRPC-fallback error which is an instance of google.rpc.Status,\n  // and puts it into the object similar to gRPC ServiceError object.\n\n\n  decodeErrorFromBuffer(buffer) {\n    return this.callErrorFromStatus(this.decodeRpcStatus(buffer));\n  } // Decodes gRPC metadata error details which is an instance of google.rpc.Status.\n\n\n  decodeGRPCStatusDetails(bufferArr) {\n    const details = [];\n    let errorInfo;\n    bufferArr.forEach(buffer => {\n      const uint8array = new Uint8Array(buffer);\n      const rpcStatus = this.statusType.decode(uint8array);\n\n      for (const detail of rpcStatus.details) {\n        try {\n          const decodedDetail = this.decodeProtobufAny(detail);\n          details.push(decodedDetail);\n\n          if (detail.type_url === 'type.googleapis.com/google.rpc.ErrorInfo') {\n            errorInfo = decodedDetail;\n          }\n        } catch (err) {// cannot decode detail, likely because of the unknown type - just skip it\n        }\n      }\n    });\n    const result = {\n      details,\n      errorInfo\n    };\n    return result;\n  }\n\n}\n\nexports.GoogleErrorDecoder = GoogleErrorDecoder;","map":{"version":3,"mappings":"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","names":["GoogleError","Error","parseGRPCStatusDetails","err","decoder","GoogleErrorDecoder","metadata","get","statusDetailsObj","decodeGRPCStatusDetails","details","length","statusDetails","errorInfo","reason","domain","errorInfoMetadata","decodeErr","parseHttpError","json","error","Object","assign","code","status_1","undefined","find","item","exports","constructor","errorProtoJson","require","root","protobuf","Root","fromJSON","anyType","lookupType","statusType","decodeProtobufAny","anyValue","match","type_url","typeName","type","decode","value","decodeRpcStatus","buffer","uint8array","Uint8Array","status","detail","decodedDetail","push","result","message","callErrorFromStatus","decodeErrorFromBuffer","bufferArr","forEach","rpcStatus"],"sources":["../../src/googleError.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}