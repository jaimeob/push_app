{"ast":null,"code":"import * as firebase from 'firebase/app';\nimport { getMessaging, getToken } from \"firebase/messaging\"; // For Firebase JS SDK v7.20.0 and later, measurementId is optional\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBDhAyJlTYTdgz0v5ZhAHQ7onRnOErvSa8\",\n  authDomain: \"push-app-13b48.firebaseapp.com\",\n  //databaseURL: \"FROM FIREBASE CONSOLE\",\n  projectId: \"push-app-13b48\",\n  storageBucket: \"push-app-13b48.appspot.com\",\n  messagingSenderId: \"941794665646\",\n  appId: \"1:941794665646:web:a8c7bfcf17cfe8412eb93f\",\n  measurementId: \"FROM FIREBASE CONSOLE\"\n};\nfirebase.initializeApp(firebaseConfig);\nconst messaging = getMessaging();\nconst publicKey = 'BMsvwwBB9mUKIFIW78yyuf2OpNhAkDevP44GePJSM2F2nur4Xre6JohlChvBxHyEB6NPly_hD6khRR5';\nconsole.log(publicKey, \"publicKey \");\ngetToken(messaging, {\n  vapidKey: publicKey\n}).then(currentToken => {\n  console.log(\"ENTRA ACA PA\");\n\n  if (currentToken) {\n    debugger;\n    console.log(currentToken, \"currentToken ---\"); // Send the token to your server and update the UI if necessary\n    // ...\n  } else {\n    // Show permission request UI\n    console.log('No registration token available. Request permission to generate one.'); // ...\n  }\n}).catch(err => {\n  console.log('An error occurred while retrieving token. ', err); // ...\n});\nexport const onMessageListener = () => new Promise(resolve => {\n  console.log(messaging, \"messaging\");\n  messaging.onMessage(payload => {\n    resolve(payload);\n  });\n});","map":{"version":3,"sources":["/Users/jaimeojeda/Documents/firebase/push_app/src/firebaseInit.js"],"names":["firebase","getMessaging","getToken","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","messaging","publicKey","console","log","vapidKey","then","currentToken","catch","err","onMessageListener","Promise","resolve","onMessage","payload"],"mappings":"AAAA,OAAO,KAAKA,QAAZ,MAA0B,cAA1B;AACA,SAASC,YAAT,EAAuBC,QAAvB,QAAuC,oBAAvC,C,CAEA;;AACA,MAAMC,cAAc,GAAG;AACnBC,EAAAA,MAAM,EAAE,yCADW;AAEnBC,EAAAA,UAAU,EAAE,gCAFO;AAGnB;AACAC,EAAAA,SAAS,EAAE,gBAJQ;AAKnBC,EAAAA,aAAa,EAAE,4BALI;AAMnBC,EAAAA,iBAAiB,EAAE,cANA;AAOnBC,EAAAA,KAAK,EAAE,2CAPY;AAQnBC,EAAAA,aAAa,EAAE;AARI,CAAvB;AAaAV,QAAQ,CAACW,aAAT,CAAuBR,cAAvB;AAEA,MAAMS,SAAS,GAAGX,YAAY,EAA9B;AAEA,MAAMY,SAAS,GAAG,iFAAlB;AAEAC,OAAO,CAACC,GAAR,CAAYF,SAAZ,EAAsB,YAAtB;AAEAX,QAAQ,CAACU,SAAD,EAAY;AAAEI,EAAAA,QAAQ,EAAEH;AAAZ,CAAZ,CAAR,CAA6CI,IAA7C,CAAmDC,YAAD,IAAkB;AAChEJ,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;;AACA,MAAIG,YAAJ,EAAkB;AACd;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,YAAZ,EAAyB,kBAAzB,EAFc,CAGhB;AACA;AACD,GALD,MAKO;AACL;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAY,sEAAZ,EAFK,CAGL;AACD;AACF,CAZH,EAYKI,KAZL,CAYYC,GAAD,IAAS;AAChBN,EAAAA,OAAO,CAACC,GAAR,CAAY,4CAAZ,EAA0DK,GAA1D,EADgB,CAEhB;AACD,CAfH;AAiBA,OAAO,MAAMC,iBAAiB,GAAG,MAC7B,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AACrBT,EAAAA,OAAO,CAACC,GAAR,CAAYH,SAAZ,EAAsB,WAAtB;AACAA,EAAAA,SAAS,CAACY,SAAV,CAAqBC,OAAD,IAAa;AAC7BF,IAAAA,OAAO,CAACE,OAAD,CAAP;AACH,GAFD;AAGH,CALD,CADG","sourcesContent":["import * as firebase from 'firebase/app'\nimport { getMessaging, getToken } from \"firebase/messaging\";\n\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBDhAyJlTYTdgz0v5ZhAHQ7onRnOErvSa8\",\n    authDomain: \"push-app-13b48.firebaseapp.com\",\n    //databaseURL: \"FROM FIREBASE CONSOLE\",\n    projectId: \"push-app-13b48\",\n    storageBucket: \"push-app-13b48.appspot.com\",\n    messagingSenderId: \"941794665646\",\n    appId: \"1:941794665646:web:a8c7bfcf17cfe8412eb93f\",\n    measurementId: \"FROM FIREBASE CONSOLE\",\n\n};\n\n\nfirebase.initializeApp(firebaseConfig);\n\nconst messaging = getMessaging();\n\nconst publicKey = 'BMsvwwBB9mUKIFIW78yyuf2OpNhAkDevP44GePJSM2F2nur4Xre6JohlChvBxHyEB6NPly_hD6khRR5';\n\nconsole.log(publicKey,\"publicKey \");\n\ngetToken(messaging, { vapidKey: publicKey }).then((currentToken) => {\n    console.log(\"ENTRA ACA PA\");\n    if (currentToken) {\n        debugger\n        console.log(currentToken,\"currentToken ---\");\n      // Send the token to your server and update the UI if necessary\n      // ...\n    } else {\n      // Show permission request UI\n      console.log('No registration token available. Request permission to generate one.');\n      // ...\n    }\n  }).catch((err) => {\n    console.log('An error occurred while retrieving token. ', err);\n    // ...\n  });\n\nexport const onMessageListener = () =>\n    new Promise((resolve) => {\n        console.log(messaging,\"messaging\");\n        messaging.onMessage((payload) => {\n            resolve(payload);\n        });\n    });"]},"metadata":{},"sourceType":"module"}